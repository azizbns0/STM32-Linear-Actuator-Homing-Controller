
Test_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008068  08008068  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008070  08008070  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008070  08008070  00009070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008074  08008074  00009074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008078  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a6c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae8  20000ae8  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015189  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b04  00000000  00000000  0001f235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00022d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dae  00000000  00000000  00023f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241d0  00000000  00000000  00024cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193aa  00000000  00000000  00048ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbfeb  00000000  00000000  00062270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e25b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d78  00000000  00000000  0012e2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00133018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008034 	.word	0x08008034

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008034 	.word	0x08008034

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <DebounceUpdate>:
} Debounce_t;

static Debounce_t left_db;
static Debounce_t right_db;

static bool DebounceUpdate(Debounce_t *db, bool raw, uint32_t now, uint32_t debounce_ms) {
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	460b      	mov	r3, r1
 8000502:	72fb      	strb	r3, [r7, #11]
    if (raw != db->last_raw) {
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	785b      	ldrb	r3, [r3, #1]
 8000508:	7afa      	ldrb	r2, [r7, #11]
 800050a:	429a      	cmp	r2, r3
 800050c:	d006      	beq.n	800051c <DebounceUpdate+0x28>
        db->last_raw = raw;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	7afa      	ldrb	r2, [r7, #11]
 8000512:	705a      	strb	r2, [r3, #1]
        db->last_change = now;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	e009      	b.n	8000530 <DebounceUpdate+0x3c>
    } else {
        if ((now - db->last_change) >= debounce_ms) {
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	d802      	bhi.n	8000530 <DebounceUpdate+0x3c>
            db->stable = raw;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	7afa      	ldrb	r2, [r7, #11]
 800052e:	701a      	strb	r2, [r3, #0]
        }
    }
    return db->stable;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	781b      	ldrb	r3, [r3, #0]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <Homing_SetError>:


static void Homing_SetError(HomingCtx_t *ctx, int error_code) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
    HW_ActuatorStop();
 800054a:	f000 f9fd 	bl	8000948 <HW_ActuatorStop>
    ctx->state = HOMING_STATE_ERROR;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2206      	movs	r2, #6
 8000552:	701a      	strb	r2, [r3, #0]
    ctx->error_code = error_code;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	621a      	str	r2, [r3, #32]
    ctx->middle_movement_started = false;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <Homing_Init>:


void Homing_Init(HomingCtx_t *ctx) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    HW_ClearSwitches();
 8000574:	f000 fa2a 	bl	80009cc <HW_ClearSwitches>

    ctx->state = HOMING_STATE_IDLE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
    ctx->start_tick = 0;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
    ctx->measurement_start = 0;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
    ctx->t_lr_ms = 0;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
    ctx->t_rl_ms = 0;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
    ctx->middle_time_ms = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]

    // Set parameters from defined defaults if not previously set
    if (ctx->timeout_ms == 0) ctx->timeout_ms = HOMING_DEFAULT_TIMEOUT_MS;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d103      	bne.n	80005ac <Homing_Init+0x40>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80005aa:	619a      	str	r2, [r3, #24]
    if (ctx->debounce_ms == 0) ctx->debounce_ms = HOMING_DEFAULT_DEBOUNCE_MS;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <Homing_Init+0x4e>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2232      	movs	r2, #50	@ 0x32
 80005b8:	61da      	str	r2, [r3, #28]

    ctx->error_code = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
    ctx->middle_movement_started = false;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    ctx->enable_asymmetric_calc = true; // Default to true for the robust version
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    // Initialize static debouncer states
    left_db.stable = left_db.last_raw = false;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <Homing_Init+0x94>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	705a      	strb	r2, [r3, #1]
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <Homing_Init+0x94>)
 80005d8:	785a      	ldrb	r2, [r3, #1]
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <Homing_Init+0x94>)
 80005dc:	701a      	strb	r2, [r3, #0]
    left_db.last_change = 0;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <Homing_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
    right_db.stable = right_db.last_raw = false;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <Homing_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	705a      	strb	r2, [r3, #1]
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <Homing_Init+0x98>)
 80005ec:	785a      	ldrb	r2, [r3, #1]
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <Homing_Init+0x98>)
 80005f0:	701a      	strb	r2, [r3, #0]
    right_db.last_change = 0;
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <Homing_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000098 	.word	0x20000098
 8000604:	200000a0 	.word	0x200000a0

08000608 <Homing_Start>:

void Homing_Start(HomingCtx_t *ctx) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    if (ctx->state == HOMING_STATE_IDLE || ctx->state == HOMING_STATE_DONE || ctx->state == HOMING_STATE_ERROR) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <Homing_Start+0x20>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d003      	beq.n	8000628 <Homing_Start+0x20>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b06      	cmp	r3, #6
 8000626:	d10c      	bne.n	8000642 <Homing_Start+0x3a>
        Homing_Init(ctx); // Full context reset
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff9f 	bl	800056c <Homing_Init>

        ctx->start_tick = HW_GetTickMs();
 800062e:	f000 f937 	bl	80008a0 <HW_GetTickMs>
 8000632:	4602      	mov	r2, r0
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	605a      	str	r2, [r3, #4]
        ctx->state = HOMING_STATE_MOVE_TO_LEFT;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
        HW_ActuatorMoveLeft();
 800063e:	f000 f94f 	bl	80008e0 <HW_ActuatorMoveLeft>
    }
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <Homing_Update>:

void Homing_Update(HomingCtx_t *ctx) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    uint32_t now = HW_GetTickMs();
 8000654:	f000 f924 	bl	80008a0 <HW_GetTickMs>
 8000658:	6178      	str	r0, [r7, #20]
    // Debounce the raw switch inputs
    bool left = DebounceUpdate(&left_db, HW_LeftSwitchRaw(), now, ctx->debounce_ms);
 800065a:	f000 f929 	bl	80008b0 <HW_LeftSwitchRaw>
 800065e:	4603      	mov	r3, r0
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	4885      	ldr	r0, [pc, #532]	@ (8000880 <Homing_Update+0x234>)
 800066a:	f7ff ff43 	bl	80004f4 <DebounceUpdate>
 800066e:	4603      	mov	r3, r0
 8000670:	74fb      	strb	r3, [r7, #19]
    bool right = DebounceUpdate(&right_db, HW_RightSwitchRaw(), now, ctx->debounce_ms);
 8000672:	f000 f929 	bl	80008c8 <HW_RightSwitchRaw>
 8000676:	4603      	mov	r3, r0
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4880      	ldr	r0, [pc, #512]	@ (8000884 <Homing_Update+0x238>)
 8000682:	f7ff ff37 	bl	80004f4 <DebounceUpdate>
 8000686:	4603      	mov	r3, r0
 8000688:	74bb      	strb	r3, [r7, #18]

    // Timeout check is only relevant when homing is actively running
    if (ctx->state != HOMING_STATE_IDLE && ctx->state != HOMING_STATE_DONE &&
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d014      	beq.n	80006bc <Homing_Update+0x70>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b05      	cmp	r3, #5
 8000698:	d010      	beq.n	80006bc <Homing_Update+0x70>
        ctx->state != HOMING_STATE_ERROR && (now - ctx->start_tick) > ctx->timeout_ms) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
    if (ctx->state != HOMING_STATE_IDLE && ctx->state != HOMING_STATE_DONE &&
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d00c      	beq.n	80006bc <Homing_Update+0x70>
        ctx->state != HOMING_STATE_ERROR && (now - ctx->start_tick) > ctx->timeout_ms) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d904      	bls.n	80006bc <Homing_Update+0x70>

        Homing_SetError(ctx, 99); // Generic timeout error
 80006b2:	2163      	movs	r1, #99	@ 0x63
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ff43 	bl	8000540 <Homing_SetError>
        return;
 80006ba:	e0dd      	b.n	8000878 <Homing_Update+0x22c>
    }


    switch (ctx->state) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b06      	cmp	r3, #6
 80006c2:	f200 80d9 	bhi.w	8000878 <Homing_Update+0x22c>
 80006c6:	a201      	add	r2, pc, #4	@ (adr r2, 80006cc <Homing_Update+0x80>)
 80006c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006cc:	08000879 	.word	0x08000879
 80006d0:	080006e9 	.word	0x080006e9
 80006d4:	08000703 	.word	0x08000703
 80006d8:	08000771 	.word	0x08000771
 80006dc:	080007db 	.word	0x080007db
 80006e0:	08000879 	.word	0x08000879
 80006e4:	08000879 	.word	0x08000879
        case HOMING_STATE_ERROR:
            // Do nothing, handled by main loop or Homing_Start
            break;

        case HOMING_STATE_MOVE_TO_LEFT:
            if (left) { // Left Switch hit
 80006e8:	7cfb      	ldrb	r3, [r7, #19]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 80bd 	beq.w	800086a <Homing_Update+0x21e>
                HW_ActuatorStop();
 80006f0:	f000 f92a 	bl	8000948 <HW_ActuatorStop>
                ctx->start_tick = now;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	605a      	str	r2, [r3, #4]
                ctx->state = HOMING_STATE_MOVE_TO_RIGHT_MEASURE;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2202      	movs	r2, #2
 80006fe:	701a      	strb	r2, [r3, #0]
            }
            break; // Timeout already checked above
 8000700:	e0b3      	b.n	800086a <Homing_Update+0x21e>

        case HOMING_STATE_MOVE_TO_RIGHT_MEASURE:
            // 1. Wait until moved off the left switch AND start measuring time
            if (left) {
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <Homing_Update+0xc2>
                HW_ActuatorMoveRight();
 8000708:	f000 f904 	bl	8000914 <HW_ActuatorMoveRight>
 800070c:	e01d      	b.n	800074a <Homing_Update+0xfe>
            } else if (ctx->measurement_start == 0) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <Homing_Update+0xd6>
                HW_ActuatorMoveRight();
 8000716:	f000 f8fd 	bl	8000914 <HW_ActuatorMoveRight>
                ctx->measurement_start = now; // Start measurement right after leaving left switch
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	e013      	b.n	800074a <Homing_Update+0xfe>
            } else if (right) {
 8000722:	7cbb      	ldrb	r3, [r7, #18]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d010      	beq.n	800074a <Homing_Update+0xfe>
                // 3. Hit the right switch - end measurement
                HW_ActuatorStop();
 8000728:	f000 f90e 	bl	8000948 <HW_ActuatorStop>
                ctx->t_lr_ms = now - ctx->measurement_start; // Record t_LR
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	1ad2      	subs	r2, r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60da      	str	r2, [r3, #12]
                ctx->start_tick = now;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	605a      	str	r2, [r3, #4]
                ctx->state = HOMING_STATE_MOVE_TO_LEFT_MEASURE;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2203      	movs	r2, #3
 8000742:	701a      	strb	r2, [r3, #0]
                ctx->measurement_start = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
            }
            if (ctx->measurement_start != 0 && (now - ctx->measurement_start) > ctx->timeout_ms) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 808d 	beq.w	800086e <Homing_Update+0x222>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 8084 	bls.w	800086e <Homing_Update+0x222>
                Homing_SetError(ctx, 2); // Timeout during full move right
 8000766:	2102      	movs	r1, #2
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff fee9 	bl	8000540 <Homing_SetError>
            }
            break;
 800076e:	e07e      	b.n	800086e <Homing_Update+0x222>

        case HOMING_STATE_MOVE_TO_LEFT_MEASURE:
            // 1. Start moving left if not started
            if (ctx->measurement_start == 0) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d112      	bne.n	800079e <Homing_Update+0x152>
                // Final calculation: Time to middle is half the time of the *last* measured move (t_LR),
                // regardless of asymmetry, as speed is constant in that direction.
                ctx->middle_time_ms = ctx->t_lr_ms / 2;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	085a      	lsrs	r2, r3, #1
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	615a      	str	r2, [r3, #20]

                if (ctx->middle_time_ms == 0) {
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d104      	bne.n	8000794 <Homing_Update+0x148>
                    Homing_SetError(ctx, 3); // Measurement time was zero
 800078a:	2103      	movs	r1, #3
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fed7 	bl	8000540 <Homing_SetError>
                    break;
 8000792:	e071      	b.n	8000878 <Homing_Update+0x22c>
                }

                HW_ActuatorMoveLeft();
 8000794:	f000 f8a4 	bl	80008e0 <HW_ActuatorMoveLeft>
                ctx->measurement_start = now;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	609a      	str	r2, [r3, #8]
            }

            // 2. Wait for left switch hit
            if (left) {
 800079e:	7cfb      	ldrb	r3, [r7, #19]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00d      	beq.n	80007c0 <Homing_Update+0x174>
                HW_ActuatorStop();
 80007a4:	f000 f8d0 	bl	8000948 <HW_ActuatorStop>
                ctx->t_rl_ms = now - ctx->measurement_start; // Record t_RL for completeness
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	611a      	str	r2, [r3, #16]
                ctx->state = HOMING_STATE_MOVE_TO_MIDDLE;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2204      	movs	r2, #4
 80007b8:	701a      	strb	r2, [r3, #0]
                ctx->start_tick = now;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	605a      	str	r2, [r3, #4]
            }

            // 3. Timeout check
            if ((now - ctx->measurement_start) > ctx->timeout_ms) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	1ad2      	subs	r2, r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d950      	bls.n	8000872 <Homing_Update+0x226>
                Homing_SetError(ctx, 4); // Timeout during full move left
 80007d0:	2104      	movs	r1, #4
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff feb4 	bl	8000540 <Homing_SetError>
            }
            break;
 80007d8:	e04b      	b.n	8000872 <Homing_Update+0x226>

        case HOMING_STATE_MOVE_TO_MIDDLE:
            // 1. Initial delay (MOVE_START_BUFFER_MS) to ensure stop command from previous state is processed
        	if (!ctx->middle_movement_started && (now - ctx->start_tick) >= MOVE_START_BUFFER_MS) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80007e0:	f083 0301 	eor.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00e      	beq.n	8000808 <Homing_Update+0x1bc>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b31      	cmp	r3, #49	@ 0x31
 80007f4:	d908      	bls.n	8000808 <Homing_Update+0x1bc>
        		ctx->start_tick = now;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	605a      	str	r2, [r3, #4]
        		HW_ActuatorMoveRight(); // Move to middle from the left limit is always to the RIGHT
 80007fc:	f000 f88a 	bl	8000914 <HW_ActuatorMoveRight>
        		ctx->middle_movement_started = true;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        	}

        	// 2. Check for completion
        	if (ctx->middle_movement_started && (now - ctx->start_tick) >= ctx->middle_time_ms) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800080e:	2b00      	cmp	r3, #0
 8000810:	d010      	beq.n	8000834 <Homing_Update+0x1e8>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	1ad2      	subs	r2, r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	429a      	cmp	r2, r3
 8000820:	d308      	bcc.n	8000834 <Homing_Update+0x1e8>
        		HW_ActuatorStop();
 8000822:	f000 f891 	bl	8000948 <HW_ActuatorStop>
        		ctx->state = HOMING_STATE_DONE;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2205      	movs	r2, #5
 800082a:	701a      	strb	r2, [r3, #0]
        		ctx->middle_movement_started = false;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        	}

        	// 3. Robust Safety Check: Wait until the debounced switch is guaranteed to be clear
            uint32_t required_safety_time = ctx->debounce_ms + SAFETY_CHECK_BUFFER_MS;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	3364      	adds	r3, #100	@ 0x64
 800083a:	60fb      	str	r3, [r7, #12]

        	if (ctx->middle_movement_started && (now - ctx->start_tick) > required_safety_time) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000842:	2b00      	cmp	r3, #0
 8000844:	d017      	beq.n	8000876 <Homing_Update+0x22a>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	429a      	cmp	r2, r3
 8000852:	d210      	bcs.n	8000876 <Homing_Update+0x22a>
        		if (left || right) {
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <Homing_Update+0x214>
 800085a:	7cbb      	ldrb	r3, [r7, #18]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00a      	beq.n	8000876 <Homing_Update+0x22a>
        			Homing_SetError(ctx, 5); // Limit switch hit during final center move
 8000860:	2105      	movs	r1, #5
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fe6c 	bl	8000540 <Homing_SetError>
        		}
        	}
        	break;
 8000868:	e005      	b.n	8000876 <Homing_Update+0x22a>
            break; // Timeout already checked above
 800086a:	bf00      	nop
 800086c:	e004      	b.n	8000878 <Homing_Update+0x22c>
            break;
 800086e:	bf00      	nop
 8000870:	e002      	b.n	8000878 <Homing_Update+0x22c>
            break;
 8000872:	bf00      	nop
 8000874:	e000      	b.n	8000878 <Homing_Update+0x22c>
        	break;
 8000876:	bf00      	nop
    }
}
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000098 	.word	0x20000098
 8000884:	200000a0 	.word	0x200000a0

08000888 <Homing_GetState>:

HomingState_t Homing_GetState(HomingCtx_t *ctx) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    return ctx->state;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HW_GetTickMs>:
#define TIME_TO_LEFT_FROM_RIGHT_LIMIT_MS 3000 // t_RL = 3000ms

// Define a value for the initial move to the left switch (if starting from far right)
#define TIME_TO_LEFT_MS 4000 // Initial homing direction

uint32_t HW_GetTickMs(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80008a4:	f000 fdee 	bl	8001484 <HAL_GetTick>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HW_LeftSwitchRaw>:

bool HW_LeftSwitchRaw(void) {
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
    return left_switch_on;
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <HW_LeftSwitchRaw+0x14>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200000b0 	.word	0x200000b0

080008c8 <HW_RightSwitchRaw>:

bool HW_RightSwitchRaw(void) {
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
    return right_switch_on;
 80008cc:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <HW_RightSwitchRaw+0x14>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	200000b1 	.word	0x200000b1

080008e0 <HW_ActuatorMoveLeft>:

void HW_ActuatorMoveLeft(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    left_move_start = HAL_GetTick();
 80008e4:	f000 fdce 	bl	8001484 <HAL_GetTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <HW_ActuatorMoveLeft+0x24>)
 80008ec:	6013      	str	r3, [r2, #0]
    right_move_start = 0;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HW_ActuatorMoveLeft+0x28>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
    left_switch_on = false;
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HW_ActuatorMoveLeft+0x2c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
    right_switch_on = false;
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <HW_ActuatorMoveLeft+0x30>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000a8 	.word	0x200000a8
 8000908:	200000ac 	.word	0x200000ac
 800090c:	200000b0 	.word	0x200000b0
 8000910:	200000b1 	.word	0x200000b1

08000914 <HW_ActuatorMoveRight>:

void HW_ActuatorMoveRight(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
    right_move_start = HAL_GetTick();
 8000918:	f000 fdb4 	bl	8001484 <HAL_GetTick>
 800091c:	4603      	mov	r3, r0
 800091e:	4a06      	ldr	r2, [pc, #24]	@ (8000938 <HW_ActuatorMoveRight+0x24>)
 8000920:	6013      	str	r3, [r2, #0]
    left_move_start = 0;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HW_ActuatorMoveRight+0x28>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
    left_switch_on = false;
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <HW_ActuatorMoveRight+0x2c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
    right_switch_on = false;
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HW_ActuatorMoveRight+0x30>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000ac 	.word	0x200000ac
 800093c:	200000a8 	.word	0x200000a8
 8000940:	200000b0 	.word	0x200000b0
 8000944:	200000b1 	.word	0x200000b1

08000948 <HW_ActuatorStop>:


void HW_ActuatorStop(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
    // Keep switches active if reached, until a new move starts
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HW_SimulationUpdate>:

void HW_SimulationUpdate(uint32_t now_ms) {
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    // Actuator moving left
    if (left_move_start > 0) {
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <HW_SimulationUpdate+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d013      	beq.n	8000990 <HW_SimulationUpdate+0x38>
        // Use TIME_TO_LEFT_FROM_RIGHT_LIMIT_MS if we are near the right limit (or TIME_TO_LEFT_MS otherwise)
        uint32_t required_time = (right_switch_on) ? TIME_TO_LEFT_FROM_RIGHT_LIMIT_MS : TIME_TO_LEFT_MS;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HW_SimulationUpdate+0x68>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <HW_SimulationUpdate+0x1e>
 8000970:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000974:	e001      	b.n	800097a <HW_SimulationUpdate+0x22>
 8000976:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800097a:	60fb      	str	r3, [r7, #12]
        if ((now_ms - left_move_start) >= required_time) {
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <HW_SimulationUpdate+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	429a      	cmp	r2, r3
 8000988:	d802      	bhi.n	8000990 <HW_SimulationUpdate+0x38>
            left_switch_on = true;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HW_SimulationUpdate+0x6c>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
        }
    }
    if (right_move_start > 0 && (now_ms - right_move_start) >= TIME_TO_RIGHT_FROM_LEFT_LIMIT_MS) {
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <HW_SimulationUpdate+0x70>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00a      	beq.n	80009ae <HW_SimulationUpdate+0x56>
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HW_SimulationUpdate+0x70>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d902      	bls.n	80009ae <HW_SimulationUpdate+0x56>
        right_switch_on = true;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HW_SimulationUpdate+0x68>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
    }
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200000a8 	.word	0x200000a8
 80009c0:	200000b1 	.word	0x200000b1
 80009c4:	200000b0 	.word	0x200000b0
 80009c8:	200000ac 	.word	0x200000ac

080009cc <HW_ClearSwitches>:

// CRITICAL RESET FUNCTION: Used by Homing_Init for clean restarts
void HW_ClearSwitches(void) {
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
    left_move_start = 0;
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HW_ClearSwitches+0x28>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
    right_move_start = 0;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <HW_ClearSwitches+0x2c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
    left_switch_on = false;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <HW_ClearSwitches+0x30>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
    right_switch_on = false;
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <HW_ClearSwitches+0x34>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200000a8 	.word	0x200000a8
 80009f8:	200000ac 	.word	0x200000ac
 80009fc:	200000b0 	.word	0x200000b0
 8000a00:	200000b1 	.word	0x200000b1

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f000 fcd5 	bl	80013b8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f8eb 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 f9e7 	bl	8000de4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a16:	f000 f951 	bl	8000cbc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a1a:	f000 f97d 	bl	8000d18 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a1e:	f000 f9ab 	bl	8000d78 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a22:	f006 ff19 	bl	8007858 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  Homing_Init(&homing);
 8000a26:	4869      	ldr	r0, [pc, #420]	@ (8000bcc <main+0x1c8>)
 8000a28:	f7ff fda0 	bl	800056c <Homing_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b64      	ldr	r3, [pc, #400]	@ (8000bd0 <main+0x1cc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a63      	ldr	r2, [pc, #396]	@ (8000bd0 <main+0x1cc>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b61      	ldr	r3, [pc, #388]	@ (8000bd0 <main+0x1cc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4859      	ldr	r0, [pc, #356]	@ (8000bd4 <main+0x1d0>)
 8000a6e:	f000 fe4b 	bl	8001708 <HAL_GPIO_Init>
//  Homing_Start(&homing);
  /* USER CODE BEGIN WHILE */
  /* Replace your while(1) loop with this corrected version */

  while (1) {
      uint32_t now = HAL_GetTick();
 8000a72:	f000 fd07 	bl	8001484 <HAL_GetTick>
 8000a76:	61f8      	str	r0, [r7, #28]

      // Auto-start test after 3 seconds
      if (!test_running && now > 3000) {
 8000a78:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <main+0x1d4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f083 0301 	eor.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00a      	beq.n	8000a9c <main+0x98>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d905      	bls.n	8000a9c <main+0x98>
          test_running = true;
 8000a90:	4b51      	ldr	r3, [pc, #324]	@ (8000bd8 <main+0x1d4>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
          Homing_Start(&homing);
 8000a96:	484d      	ldr	r0, [pc, #308]	@ (8000bcc <main+0x1c8>)
 8000a98:	f7ff fdb6 	bl	8000608 <Homing_Start>
      }
      HW_SimulationUpdate(now);
 8000a9c:	69f8      	ldr	r0, [r7, #28]
 8000a9e:	f7ff ff5b 	bl	8000958 <HW_SimulationUpdate>



      // Run homing step
      if (test_running) {
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd8 <main+0x1d4>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <main+0xac>
    	  Homing_Update(&homing);
 8000aaa:	4848      	ldr	r0, [pc, #288]	@ (8000bcc <main+0x1c8>)
 8000aac:	f7ff fdce 	bl	800064c <Homing_Update>
      }

      // LED indication
      HomingState_t state = Homing_GetState(&homing);
 8000ab0:	4846      	ldr	r0, [pc, #280]	@ (8000bcc <main+0x1c8>)
 8000ab2:	f7ff fee9 	bl	8000888 <Homing_GetState>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	76fb      	strb	r3, [r7, #27]
      HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ac0:	4846      	ldr	r0, [pc, #280]	@ (8000bdc <main+0x1d8>)
 8000ac2:	f000 ffbd 	bl	8001a40 <HAL_GPIO_WritePin>



      switch (state) {
 8000ac6:	7efb      	ldrb	r3, [r7, #27]
 8000ac8:	2b06      	cmp	r3, #6
 8000aca:	d87a      	bhi.n	8000bc2 <main+0x1be>
 8000acc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad4 <main+0xd0>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000af1 	.word	0x08000af1
 8000ad8:	08000aff 	.word	0x08000aff
 8000adc:	08000b0d 	.word	0x08000b0d
 8000ae0:	08000aff 	.word	0x08000aff
 8000ae4:	08000b31 	.word	0x08000b31
 8000ae8:	08000b3f 	.word	0x08000b3f
 8000aec:	08000b7d 	.word	0x08000b7d
      	  case HOMING_STATE_IDLE:
                   // All LEDs OFF
      		  HAL_GPIO_WritePin(GPIOD, LD3_Pin | LD5_Pin | LD6_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000af6:	4839      	ldr	r0, [pc, #228]	@ (8000bdc <main+0x1d8>)
 8000af8:	f000 ffa2 	bl	8001a40 <HAL_GPIO_WritePin>
              break;
 8000afc:	e061      	b.n	8000bc2 <main+0x1be>
          case HOMING_STATE_MOVE_TO_LEFT:
          case HOMING_STATE_MOVE_TO_LEFT_MEASURE:
              HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);   // Orange
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b04:	4835      	ldr	r0, [pc, #212]	@ (8000bdc <main+0x1d8>)
 8000b06:	f000 ff9b 	bl	8001a40 <HAL_GPIO_WritePin>
              break;
 8000b0a:	e05a      	b.n	8000bc2 <main+0x1be>

          case HOMING_STATE_MOVE_TO_RIGHT_MEASURE:
              HAL_GPIO_WritePin(GPIOD, LD6_Pin|LD5_Pin, GPIO_PIN_SET); // Blue+Red
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b12:	4832      	ldr	r0, [pc, #200]	@ (8000bdc <main+0x1d8>)
 8000b14:	f000 ff94 	bl	8001a40 <HAL_GPIO_WritePin>
              if (HW_RightSwitchRaw()) {
 8000b18:	f7ff fed6 	bl	80008c8 <HW_RightSwitchRaw>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d04a      	beq.n	8000bb8 <main+0x1b4>
                  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b28:	482c      	ldr	r0, [pc, #176]	@ (8000bdc <main+0x1d8>)
 8000b2a:	f000 ff89 	bl	8001a40 <HAL_GPIO_WritePin>
              }
              break;
 8000b2e:	e043      	b.n	8000bb8 <main+0x1b4>

          case HOMING_STATE_MOVE_TO_MIDDLE:
              HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);   // Blue only
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b36:	4829      	ldr	r0, [pc, #164]	@ (8000bdc <main+0x1d8>)
 8000b38:	f000 ff82 	bl	8001a40 <HAL_GPIO_WritePin>
              break;
 8000b3c:	e041      	b.n	8000bc2 <main+0x1be>

          case HOMING_STATE_DONE:
              HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);   // Green
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b44:	4825      	ldr	r0, [pc, #148]	@ (8000bdc <main+0x1d8>)
 8000b46:	f000 ff7b 	bl	8001a40 <HAL_GPIO_WritePin>
              static uint32_t success_start = 0;
              if (success_start == 0) success_start = now;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <main+0x1dc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <main+0x154>
 8000b52:	4a23      	ldr	r2, [pc, #140]	@ (8000be0 <main+0x1dc>)
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	6013      	str	r3, [r2, #0]
              if (now - success_start > 5000) {
 8000b58:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <main+0x1dc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d929      	bls.n	8000bbc <main+0x1b8>
                  test_running = false;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <main+0x1d4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
                  success_start = 0;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <main+0x1dc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]

                  Homing_Init(&homing); // Restarts the test cleanly
 8000b74:	4815      	ldr	r0, [pc, #84]	@ (8000bcc <main+0x1c8>)
 8000b76:	f7ff fcf9 	bl	800056c <Homing_Init>
              }
              break;
 8000b7a:	e01f      	b.n	8000bbc <main+0x1b8>
          case HOMING_STATE_ERROR:
              HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000b82:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <main+0x1d8>)
 8000b84:	f000 ff5c 	bl	8001a40 <HAL_GPIO_WritePin>
              static uint32_t error_start = 0;
              if (error_start == 0) error_start = now;
 8000b88:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <main+0x1e0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <main+0x192>
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <main+0x1e0>)
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	6013      	str	r3, [r2, #0]
              if (now - error_start > 2000) {
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <main+0x1e0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ba2:	d90d      	bls.n	8000bc0 <main+0x1bc>
                  test_running = false;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <main+0x1d4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
                  error_start = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <main+0x1e0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
                  Homing_Init(&homing);
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <main+0x1c8>)
 8000bb2:	f7ff fcdb 	bl	800056c <Homing_Init>
              }
              break;
 8000bb6:	e003      	b.n	8000bc0 <main+0x1bc>
              break;
 8000bb8:	bf00      	nop
 8000bba:	e002      	b.n	8000bc2 <main+0x1be>
              break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <main+0x1be>
              break;
 8000bc0:	bf00      	nop
      }

      HAL_Delay(100);
 8000bc2:	2064      	movs	r0, #100	@ 0x64
 8000bc4:	f000 fc6a 	bl	800149c <HAL_Delay>
  while (1) {
 8000bc8:	e753      	b.n	8000a72 <main+0x6e>
 8000bca:	bf00      	nop
 8000bcc:	200001a8 	.word	0x200001a8
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	200001d0 	.word	0x200001d0
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	200001d4 	.word	0x200001d4
 8000be4:	200001d8 	.word	0x200001d8

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	@ 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	@ 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 f98e 	bl	8007f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1c:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <SystemClock_Config+0xd0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <SystemClock_Config+0xd0>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <SystemClock_Config+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c5c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 fdd8 	bl	8004824 <HAL_RCC_OscConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c7a:	f000 f9b3 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7e:	230f      	movs	r3, #15
 8000c80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c82:	2302      	movs	r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 f839 	bl	8004d14 <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ca8:	f000 f99c 	bl	8000fe4 <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3750      	adds	r7, #80	@ 0x50
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <MX_I2C1_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_I2C1_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <MX_I2C1_Init+0x50>)
 8000cfa:	f002 ffaf 	bl	8003c5c <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 f96e 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000b4 	.word	0x200000b4
 8000d10:	40005400 	.word	0x40005400
 8000d14:	000186a0 	.word	0x000186a0

08000d18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <MX_I2S3_Init+0x58>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d40:	4a0c      	ldr	r2, [pc, #48]	@ (8000d74 <MX_I2S3_Init+0x5c>)
 8000d42:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_I2S3_Init+0x54>)
 8000d58:	f003 f8c4 	bl	8003ee4 <HAL_I2S_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d62:	f000 f93f 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000108 	.word	0x20000108
 8000d70:	40003c00 	.word	0x40003c00
 8000d74:	00017700 	.word	0x00017700

08000d78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d7e:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <MX_SPI1_Init+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dca:	f004 faf1 	bl	80053b0 <HAL_SPI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd4:	f000 f906 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000150 	.word	0x20000150
 8000de0:	40013000 	.word	0x40013000

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	@ 0x30
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	4b73      	ldr	r3, [pc, #460]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a72      	ldr	r2, [pc, #456]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b70      	ldr	r3, [pc, #448]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	4b6c      	ldr	r3, [pc, #432]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a6b      	ldr	r2, [pc, #428]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b69      	ldr	r3, [pc, #420]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b65      	ldr	r3, [pc, #404]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a64      	ldr	r2, [pc, #400]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b62      	ldr	r3, [pc, #392]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b5e      	ldr	r3, [pc, #376]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a5d      	ldr	r2, [pc, #372]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b57      	ldr	r3, [pc, #348]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a56      	ldr	r2, [pc, #344]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b54      	ldr	r3, [pc, #336]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b50      	ldr	r3, [pc, #320]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b4d      	ldr	r3, [pc, #308]	@ (8000fcc <MX_GPIO_Init+0x1e8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f64c 4108 	movw	r1, #52232	@ 0xcc08
 8000ea8:	4849      	ldr	r0, [pc, #292]	@ (8000fd0 <MX_GPIO_Init+0x1ec>)
 8000eaa:	f000 fdc9 	bl	8001a40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4848      	ldr	r0, [pc, #288]	@ (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000eb4:	f000 fdc4 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ebe:	4846      	ldr	r0, [pc, #280]	@ (8000fd8 <MX_GPIO_Init+0x1f4>)
 8000ec0:	f000 fdbe 	bl	8001a40 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE10 PE11 PE14
                           PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000ec4:	f64c 4308 	movw	r3, #52232	@ 0xcc08
 8000ec8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	483c      	ldr	r0, [pc, #240]	@ (8000fd0 <MX_GPIO_Init+0x1ec>)
 8000ede:	f000 fc13 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4836      	ldr	r0, [pc, #216]	@ (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000efa:	f000 fc05 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000efe:	2308      	movs	r3, #8
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	482e      	ldr	r0, [pc, #184]	@ (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000f1a:	f000 fbf5 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */

  GPIO_InitStruct.Pin = B1_Pin;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;  // â† THIS IS WRONG!
 8000f22:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;           // â† THIS IS ALSO WRONG!
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	482a      	ldr	r0, [pc, #168]	@ (8000fdc <MX_GPIO_Init+0x1f8>)
 8000f34:	f000 fbe8 	bl	8001708 <HAL_GPIO_Init>
  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4825      	ldr	r0, [pc, #148]	@ (8000fe0 <MX_GPIO_Init+0x1fc>)
 8000f4c:	f000 fbdc 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f62:	2305      	movs	r3, #5
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0x1fc>)
 8000f6e:	f000 fbcb 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : limit_switche_2_Pin limit_switche_1_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = limit_switche_2_Pin|limit_switche_1_Pin|OTG_FS_OverCurrent_Pin;
 8000f72:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4814      	ldr	r0, [pc, #80]	@ (8000fd8 <MX_GPIO_Init+0x1f4>)
 8000f88:	f000 fbbe 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f8c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000f90:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <MX_GPIO_Init+0x1f4>)
 8000fa6:	f000 fbaf 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <MX_GPIO_Init+0x1ec>)
 8000fc0:	f000 fba2 	bl	8001708 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3730      	adds	r7, #48	@ 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001004:	6453      	str	r3, [r2, #68]	@ 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800102e:	2007      	movs	r0, #7
 8001030:	f000 fb28 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <HAL_I2C_MspInit+0x84>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <HAL_I2C_MspInit+0x88>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_I2C_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800107e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001084:	2312      	movs	r3, #18
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001088:	2301      	movs	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001090:	2304      	movs	r3, #4
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <HAL_I2C_MspInit+0x8c>)
 800109c:	f000 fb34 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_I2C_MspInit+0x88>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	4a07      	ldr	r2, [pc, #28]	@ (80010c8 <HAL_I2C_MspInit+0x88>)
 80010aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_I2C_MspInit+0x88>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400

080010d0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	@ 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a31      	ldr	r2, [pc, #196]	@ (80011c0 <HAL_I2S_MspInit+0xf0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d15a      	bne.n	80011b6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001104:	23c0      	movs	r3, #192	@ 0xc0
 8001106:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f004 f80b 	bl	800512c <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800111c:	f7ff ff62 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	4b27      	ldr	r3, [pc, #156]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a26      	ldr	r2, [pc, #152]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 800112a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6313      	str	r3, [r2, #48]	@ 0x30
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6313      	str	r3, [r2, #48]	@ 0x30
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <HAL_I2S_MspInit+0xf4>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001174:	2310      	movs	r3, #16
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001184:	2306      	movs	r3, #6
 8001186:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <HAL_I2S_MspInit+0xf8>)
 8001190:	f000 faba 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001194:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011a6:	2306      	movs	r3, #6
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4806      	ldr	r0, [pc, #24]	@ (80011cc <HAL_I2S_MspInit+0xfc>)
 80011b2:	f000 faa9 	bl	8001708 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80011b6:	bf00      	nop
 80011b8:	3738      	adds	r7, #56	@ 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40003c00 	.word	0x40003c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020800 	.word	0x40020800

080011d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <HAL_SPI_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12b      	bne.n	800124a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_SPI_MspInit+0x88>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_SPI_MspInit+0x88>)
 80011fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_SPI_MspInit+0x88>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_SPI_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	@ (8001258 <HAL_SPI_MspInit+0x88>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_SPI_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800122a:	23e0      	movs	r3, #224	@ 0xe0
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123a:	2305      	movs	r3, #5
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <HAL_SPI_MspInit+0x8c>)
 8001246:	f000 fa5f 	bl	8001708 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40013000 	.word	0x40013000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <NMI_Handler+0x4>

08001268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <MemManage_Handler+0x4>

08001278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <UsageFault_Handler+0x4>

08001288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b6:	f000 f8d1 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <OTG_FS_IRQHandler+0x10>)
 80012c6:	f000 fe91 	bl	8001fec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200005c0 	.word	0x200005c0

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f006 fe20 	bl	8007f48 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	200001dc 	.word	0x200001dc
 800133c:	20000ae8 	.word	0x20000ae8

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800139c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001368:	f7ff ffea 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	@ (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f006 fddf 	bl	8007f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fb35 	bl	8000a04 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013a8:	08008078 	.word	0x08008078
  ldr r2, =_sbss
 80013ac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013b0:	20000ae8 	.word	0x20000ae8

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94f 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fe00 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f967 	bl	80016ee <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200001e0 	.word	0x200001e0

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200001e0 	.word	0x200001e0

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e16b      	b.n	80019fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 815a 	bne.w	80019f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d005      	beq.n	800175a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	2b02      	cmp	r3, #2
 8001758:	d130      	bne.n	80017bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 0201 	and.w	r2, r3, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d017      	beq.n	80017f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80b4 	beq.w	80019f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b60      	ldr	r3, [pc, #384]	@ (8001a14 <HAL_GPIO_Init+0x30c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a5f      	ldr	r2, [pc, #380]	@ (8001a14 <HAL_GPIO_Init+0x30c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a14 <HAL_GPIO_Init+0x30c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001a18 <HAL_GPIO_Init+0x310>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a52      	ldr	r2, [pc, #328]	@ (8001a1c <HAL_GPIO_Init+0x314>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x226>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a51      	ldr	r2, [pc, #324]	@ (8001a20 <HAL_GPIO_Init+0x318>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x222>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a50      	ldr	r2, [pc, #320]	@ (8001a24 <HAL_GPIO_Init+0x31c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x21e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a28 <HAL_GPIO_Init+0x320>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x21a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a2c <HAL_GPIO_Init+0x324>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x216>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a30 <HAL_GPIO_Init+0x328>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x212>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4c      	ldr	r2, [pc, #304]	@ (8001a34 <HAL_GPIO_Init+0x32c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4b      	ldr	r2, [pc, #300]	@ (8001a38 <HAL_GPIO_Init+0x330>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x20a>
 800190e:	2307      	movs	r3, #7
 8001910:	e00e      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001912:	2308      	movs	r3, #8
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001916:	2306      	movs	r3, #6
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	@ (8001a18 <HAL_GPIO_Init+0x310>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a32      	ldr	r2, [pc, #200]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b30      	ldr	r3, [pc, #192]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a27      	ldr	r2, [pc, #156]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a2:	4b26      	ldr	r3, [pc, #152]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f0:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <HAL_GPIO_Init+0x334>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae90 	bls.w	8001724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40021c00 	.word	0x40021c00
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af02      	add	r7, sp, #8
 8001a78:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e059      	b.n	8001b38 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f005 ff2e 	bl	8007900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ab2:	d102      	bne.n	8001aba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fd74 	bl	80055ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7c1a      	ldrb	r2, [r3, #16]
 8001acc:	f88d 2000 	strb.w	r2, [sp]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad4:	f003 fcf5 	bl	80054c2 <USB_CoreInit>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e026      	b.n	8001b38 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fd6c 	bl	80055ce <USB_SetCurrentMode>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e017      	b.n	8001b38 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7c1a      	ldrb	r2, [r3, #16]
 8001b10:	f88d 2000 	strb.w	r2, [sp]
 8001b14:	3304      	adds	r3, #4
 8001b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b18:	f003 ff16 	bl	8005948 <USB_HostInit>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e004      	b.n	8001b38 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b08b      	sub	sp, #44	@ 0x2c
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	70fb      	strb	r3, [r7, #3]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70bb      	strb	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001b5a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b5c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_HCD_HC_Init+0x2c>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e09d      	b.n	8001ca8 <HAL_HCD_HC_Init+0x168>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	3319      	adds	r3, #25
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3314      	adds	r3, #20
 8001b98:	787a      	ldrb	r2, [r7, #1]
 8001b9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3315      	adds	r3, #21
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3326      	adds	r3, #38	@ 0x26
 8001bc0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001bc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	78bb      	ldrb	r3, [r7, #2]
 8001bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bce:	b2d8      	uxtb	r0, r3
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3316      	adds	r3, #22
 8001bde:	4602      	mov	r2, r0
 8001be0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fb88 	bl	80022fc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001bec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da0a      	bge.n	8001c0a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3317      	adds	r3, #23
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e009      	b.n	8001c1e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3317      	adds	r3, #23
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 ffca 	bl	8005bbc <USB_GetHostSpeed>
 8001c28:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d10b      	bne.n	8001c4a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_HCD_HC_Init+0x10a>
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c44:	d901      	bls.n	8001c4a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c46:	23bc      	movs	r3, #188	@ 0xbc
 8001c48:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3318      	adds	r3, #24
 8001c5a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	b298      	uxth	r0, r3
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3328      	adds	r3, #40	@ 0x28
 8001c74:	4602      	mov	r2, r0
 8001c76:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	787c      	ldrb	r4, [r7, #1]
 8001c82:	78ba      	ldrb	r2, [r7, #2]
 8001c84:	78f9      	ldrb	r1, [r7, #3]
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4623      	mov	r3, r4
 8001c96:	f003 ffb9 	bl	8005c0c <USB_HC_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}

08001cb0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	70fb      	strb	r3, [r7, #3]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70bb      	strb	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3317      	adds	r3, #23
 8001cda:	78ba      	ldrb	r2, [r7, #2]
 8001cdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3326      	adds	r3, #38	@ 0x26
 8001cee:	787a      	ldrb	r2, [r7, #1]
 8001cf0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cf2:	7c3b      	ldrb	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d114      	bne.n	8001d22 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	332a      	adds	r3, #42	@ 0x2a
 8001d08:	2203      	movs	r2, #3
 8001d0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3319      	adds	r3, #25
 8001d1c:	7f3a      	ldrb	r2, [r7, #28]
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e009      	b.n	8001d36 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	332a      	adds	r3, #42	@ 0x2a
 8001d32:	2202      	movs	r2, #2
 8001d34:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d36:	787b      	ldrb	r3, [r7, #1]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	f200 8102 	bhi.w	8001f42 <HAL_HCD_HC_SubmitRequest+0x292>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001f2d 	.word	0x08001f2d
 8001d4c:	08001e19 	.word	0x08001e19
 8001d50:	08001ea3 	.word	0x08001ea3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001d54:	7c3b      	ldrb	r3, [r7, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	f040 80f5 	bne.w	8001f46 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001d5c:	78bb      	ldrb	r3, [r7, #2]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12d      	bne.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001d62:	8b3b      	ldrh	r3, [r7, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	333d      	adds	r3, #61	@ 0x3d
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	333d      	adds	r3, #61	@ 0x3d
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	332a      	adds	r3, #42	@ 0x2a
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001da6:	e0ce      	b.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	332a      	adds	r3, #42	@ 0x2a
 8001db8:	2202      	movs	r2, #2
 8001dba:	701a      	strb	r2, [r3, #0]
      break;
 8001dbc:	e0c3      	b.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	331a      	adds	r3, #26
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 80b8 	bne.w	8001f46 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	333c      	adds	r3, #60	@ 0x3c
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	332a      	adds	r3, #42	@ 0x2a
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
      break;
 8001e00:	e0a1      	b.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	332a      	adds	r3, #42	@ 0x2a
 8001e12:	2202      	movs	r2, #2
 8001e14:	701a      	strb	r2, [r3, #0]
      break;
 8001e16:	e096      	b.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d120      	bne.n	8001e60 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	333d      	adds	r3, #61	@ 0x3d
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	332a      	adds	r3, #42	@ 0x2a
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e48:	e07e      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	332a      	adds	r3, #42	@ 0x2a
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
      break;
 8001e5e:	e073      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	333c      	adds	r3, #60	@ 0x3c
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10a      	bne.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	332a      	adds	r3, #42	@ 0x2a
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
      break;
 8001e8a:	e05d      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	332a      	adds	r3, #42	@ 0x2a
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	701a      	strb	r2, [r3, #0]
      break;
 8001ea0:	e052      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ea2:	78bb      	ldrb	r3, [r7, #2]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d120      	bne.n	8001eea <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	333d      	adds	r3, #61	@ 0x3d
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	332a      	adds	r3, #42	@ 0x2a
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ed2:	e039      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	332a      	adds	r3, #42	@ 0x2a
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
      break;
 8001ee8:	e02e      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	333c      	adds	r3, #60	@ 0x3c
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	332a      	adds	r3, #42	@ 0x2a
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
      break;
 8001f14:	e018      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	332a      	adds	r3, #42	@ 0x2a
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
      break;
 8001f2a:	e00d      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	332a      	adds	r3, #42	@ 0x2a
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
      break;
 8001f40:	e002      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001f42:	bf00      	nop
 8001f44:	e000      	b.n	8001f48 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001f46:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	332c      	adds	r3, #44	@ 0x2c
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	8b39      	ldrh	r1, [r7, #24]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4403      	add	r3, r0
 8001f6c:	3334      	adds	r3, #52	@ 0x34
 8001f6e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	334c      	adds	r3, #76	@ 0x4c
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3338      	adds	r3, #56	@ 0x38
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3315      	adds	r3, #21
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	334d      	adds	r3, #77	@ 0x4d
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3310      	adds	r3, #16
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	1d19      	adds	r1, r3, #4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f003 ff42 	bl	8005e64 <USB_HC_StartXfer>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop

08001fec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fc59 	bl	80058ba <USB_GetMode>
 8002008:	4603      	mov	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	f040 80fb 	bne.w	8002206 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fc1c 	bl	8005852 <USB_ReadInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80f1 	beq.w	8002204 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fc13 	bl	8005852 <USB_ReadInterrupts>
 800202c:	4603      	mov	r3, r0
 800202e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002036:	d104      	bne.n	8002042 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002040:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fc03 	bl	8005852 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002056:	d104      	bne.n	8002062 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002060:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fbf3 	bl	8005852 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002076:	d104      	bne.n	8002082 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002080:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fbe3 	bl	8005852 <USB_ReadInterrupts>
 800208c:	4603      	mov	r3, r0
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d103      	bne.n	800209e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2202      	movs	r2, #2
 800209c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fbd5 	bl	8005852 <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020b2:	d120      	bne.n	80020f6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80020bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d113      	bne.n	80020f6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020ce:	2110      	movs	r1, #16
 80020d0:	6938      	ldr	r0, [r7, #16]
 80020d2:	f003 fac8 	bl	8005666 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020d6:	6938      	ldr	r0, [r7, #16]
 80020d8:	f003 faf7 	bl	80056ca <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7a5b      	ldrb	r3, [r3, #9]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d105      	bne.n	80020f0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fcf0 	bl	8005ad0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f005 fc83 	bl	80079fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fba9 	bl	8005852 <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800210a:	d102      	bne.n	8002112 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f001 fd31 	bl	8003b74 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fb9b 	bl	8005852 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b08      	cmp	r3, #8
 8002124:	d106      	bne.n	8002134 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f005 fc4c 	bl	80079c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2208      	movs	r2, #8
 8002132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fb8a 	bl	8005852 <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002148:	d139      	bne.n	80021be <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f902 	bl	8006358 <USB_HC_ReadInterrupt>
 8002154:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e025      	b.n	80021a8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d018      	beq.n	80021a2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002186:	d106      	bne.n	8002196 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8e9 	bl	8002366 <HCD_HC_IN_IRQHandler>
 8002194:	e005      	b.n	80021a2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 ff4b 	bl	8003038 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	795b      	ldrb	r3, [r3, #5]
 80021ac:	461a      	mov	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d3d3      	bcc.n	800215c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fb45 	bl	8005852 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d101      	bne.n	80021d6 <HAL_HCD_IRQHandler+0x1ea>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_HCD_IRQHandler+0x1ec>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d014      	beq.n	8002206 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0210 	bic.w	r2, r2, #16
 80021ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 fbe2 	bl	80039b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0210 	orr.w	r2, r2, #16
 8002200:	619a      	str	r2, [r3, #24]
 8002202:	e000      	b.n	8002206 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002204:	bf00      	nop
    }
  }
}
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_HCD_Start+0x16>
 800221e:	2302      	movs	r3, #2
 8002220:	e013      	b.n	800224a <HAL_HCD_Start+0x3e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fc8a 	bl	8005b4a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 f9a5 	bl	800558a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_HCD_Stop+0x16>
 8002264:	2302      	movs	r3, #2
 8002266:	e00d      	b.n	8002284 <HAL_HCD_Stop+0x32>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f004 f9dd 	bl	8006634 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	334c      	adds	r3, #76	@ 0x4c
 80022a8:	781b      	ldrb	r3, [r3, #0]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	3338      	adds	r3, #56	@ 0x38
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fc7c 	bl	8005bea <USB_GetCurrentFrame>
 80022f2:	4603      	mov	r3, r0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	331a      	adds	r3, #26
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	331b      	adds	r3, #27
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3325      	adds	r3, #37	@ 0x25
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3324      	adds	r3, #36	@ 0x24
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fa77 	bl	8005878 <USB_ReadChInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d11a      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	2304      	movs	r3, #4
 80023a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334d      	adds	r3, #77	@ 0x4d
 80023b6:	2207      	movs	r2, #7
 80023b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 ffd9 	bl	800637a <USB_HC_Halt>
 80023c8:	e09e      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fa50 	bl	8005878 <USB_ReadChInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e2:	d11b      	bne.n	800241c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f0:	461a      	mov	r2, r3
 80023f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334d      	adds	r3, #77	@ 0x4d
 8002408:	2208      	movs	r2, #8
 800240a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f003 ffb0 	bl	800637a <USB_HC_Halt>
 800241a:	e075      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fa27 	bl	8005878 <USB_ReadChInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b08      	cmp	r3, #8
 8002432:	d11a      	bne.n	800246a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002440:	461a      	mov	r2, r3
 8002442:	2308      	movs	r3, #8
 8002444:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	334d      	adds	r3, #77	@ 0x4d
 8002456:	2206      	movs	r2, #6
 8002458:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f003 ff89 	bl	800637a <USB_HC_Halt>
 8002468:	e04e      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fa00 	bl	8005878 <USB_ReadChInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002482:	d11b      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002490:	461a      	mov	r2, r3
 8002492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002496:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334d      	adds	r3, #77	@ 0x4d
 80024a8:	2209      	movs	r2, #9
 80024aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 ff60 	bl	800637a <USB_HC_Halt>
 80024ba:	e025      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 f9d7 	bl	8005878 <USB_ReadChInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d0:	2b80      	cmp	r3, #128	@ 0x80
 80024d2:	d119      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e0:	461a      	mov	r2, r3
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	334d      	adds	r3, #77	@ 0x4d
 80024f6:	2207      	movs	r2, #7
 80024f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f003 ff39 	bl	800637a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f003 f9b1 	bl	8005878 <USB_ReadChInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800251c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002520:	d112      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 ff25 	bl	800637a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002542:	6093      	str	r3, [r2, #8]
 8002544:	f000 bd75 	b.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f003 f991 	bl	8005878 <USB_ReadChInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	f040 8128 	bne.w	80027b2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	2320      	movs	r3, #32
 8002572:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	331b      	adds	r3, #27
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d119      	bne.n	80025be <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	331b      	adds	r3, #27
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	0151      	lsls	r1, r2, #5
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	440a      	add	r2, r1
 80025b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025bc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	799b      	ldrb	r3, [r3, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01b      	beq.n	80025fe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3330      	adds	r3, #48	@ 0x30
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	1ac9      	subs	r1, r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	3338      	adds	r3, #56	@ 0x38
 80025fc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	334d      	adds	r3, #77	@ 0x4d
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3344      	adds	r3, #68	@ 0x44
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3326      	adds	r3, #38	@ 0x26
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3326      	adds	r3, #38	@ 0x26
 800265e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002660:	2b02      	cmp	r3, #2
 8002662:	d110      	bne.n	8002686 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fe84 	bl	800637a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2310      	movs	r3, #16
 8002682:	6093      	str	r3, [r2, #8]
 8002684:	e03d      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3326      	adds	r3, #38	@ 0x26
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d00a      	beq.n	80026b2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3326      	adds	r3, #38	@ 0x26
 80026ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d127      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80026d0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	334c      	adds	r3, #76	@ 0x4c
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334c      	adds	r3, #76	@ 0x4c
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 f98b 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	799b      	ldrb	r3, [r3, #6]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d13b      	bne.n	8002782 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3338      	adds	r3, #56	@ 0x38
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4403      	add	r3, r0
 800272a:	3328      	adds	r3, #40	@ 0x28
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	440b      	add	r3, r1
 8002730:	1e59      	subs	r1, r3, #1
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4403      	add	r3, r0
 8002740:	3328      	adds	r3, #40	@ 0x28
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	fbb1 f3f3 	udiv	r3, r1, r3
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8470 	beq.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	333c      	adds	r3, #60	@ 0x3c
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2d8      	uxtb	r0, r3
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	333c      	adds	r3, #60	@ 0x3c
 800277a:	4602      	mov	r2, r0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	f000 bc58 	b.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	333c      	adds	r3, #60	@ 0x3c
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	f083 0301 	eor.w	r3, r3, #1
 800279a:	b2d8      	uxtb	r0, r3
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	333c      	adds	r3, #60	@ 0x3c
 80027aa:	4602      	mov	r2, r0
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	f000 bc40 	b.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f85c 	bl	8005878 <USB_ReadChInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d131      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	2320      	movs	r3, #32
 80027da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	331a      	adds	r3, #26
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f040 841f 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	331b      	adds	r3, #27
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	334d      	adds	r3, #77	@ 0x4d
 8002818:	2203      	movs	r2, #3
 800281a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fda8 	bl	800637a <USB_HC_Halt>
 800282a:	f000 bc02 	b.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 f81e 	bl	8005878 <USB_ReadChInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b02      	cmp	r3, #2
 8002844:	f040 8305 	bne.w	8002e52 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2302      	movs	r3, #2
 8002858:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	334d      	adds	r3, #77	@ 0x4d
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d114      	bne.n	800289a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334d      	adds	r3, #77	@ 0x4d
 8002880:	2202      	movs	r2, #2
 8002882:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	334c      	adds	r3, #76	@ 0x4c
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e2cc      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334d      	adds	r3, #77	@ 0x4d
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d114      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	334d      	adds	r3, #77	@ 0x4d
 80028c0:	2202      	movs	r2, #2
 80028c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334c      	adds	r3, #76	@ 0x4c
 80028d4:	2205      	movs	r2, #5
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e2ac      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	334d      	adds	r3, #77	@ 0x4d
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b07      	cmp	r3, #7
 80028ee:	d00b      	beq.n	8002908 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334d      	adds	r3, #77	@ 0x4d
 8002900:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002902:	2b09      	cmp	r3, #9
 8002904:	f040 80a6 	bne.w	8002a54 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334d      	adds	r3, #77	@ 0x4d
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3344      	adds	r3, #68	@ 0x44
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4403      	add	r3, r0
 800293c:	3344      	adds	r3, #68	@ 0x44
 800293e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3344      	adds	r3, #68	@ 0x44
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d943      	bls.n	80029de <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3344      	adds	r3, #68	@ 0x44
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	331a      	adds	r3, #26
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d123      	bne.n	80029c8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	331b      	adds	r3, #27
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	331c      	adds	r3, #28
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	0151      	lsls	r1, r2, #5
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	440a      	add	r2, r1
 80029be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334c      	adds	r3, #76	@ 0x4c
 80029d8:	2204      	movs	r2, #4
 80029da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029dc:	e229      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334c      	adds	r3, #76	@ 0x4c
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3326      	adds	r3, #38	@ 0x26
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3326      	adds	r3, #38	@ 0x26
 8002a18:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f040 8209 	bne.w	8002e32 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a36:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a3e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a52:	e1ee      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334d      	adds	r3, #77	@ 0x4d
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	f040 80c8 	bne.w	8002bfc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	334d      	adds	r3, #77	@ 0x4d
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	331b      	adds	r3, #27
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	f040 81ce 	bne.w	8002e34 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3326      	adds	r3, #38	@ 0x26
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d16b      	bne.n	8002b86 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3348      	adds	r3, #72	@ 0x48
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1c59      	adds	r1, r3, #1
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4403      	add	r3, r0
 8002ace:	3348      	adds	r3, #72	@ 0x48
 8002ad0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3348      	adds	r3, #72	@ 0x48
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d943      	bls.n	8002b70 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3348      	adds	r3, #72	@ 0x48
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	331b      	adds	r3, #27
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3344      	adds	r3, #68	@ 0x44
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d809      	bhi.n	8002b3a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	331c      	adds	r3, #28
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	0151      	lsls	r1, r2, #5
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	440a      	add	r2, r1
 8002b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b58:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	334c      	adds	r3, #76	@ 0x4c
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e014      	b.n	8002b9a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	334c      	adds	r3, #76	@ 0x4c
 8002b80:	2202      	movs	r2, #2
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e009      	b.n	8002b9a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	334c      	adds	r3, #76	@ 0x4c
 8002b96:	2202      	movs	r2, #2
 8002b98:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3326      	adds	r3, #38	@ 0x26
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3326      	adds	r3, #38	@ 0x26
 8002bc0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	f040 8136 	bne.w	8002e34 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bde:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002be6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e11b      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	f040 8081 	bne.w	8002d16 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334d      	adds	r3, #77	@ 0x4d
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	331b      	adds	r3, #27
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	f040 80fa 	bne.w	8002e34 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334c      	adds	r3, #76	@ 0x4c
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	0151      	lsls	r1, r2, #5
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	440a      	add	r2, r1
 8002c6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	0151      	lsls	r1, r2, #5
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	440a      	add	r2, r1
 8002c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c92:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	0151      	lsls	r1, r2, #5
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	440a      	add	r2, r1
 8002caa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cae:	f023 0320 	bic.w	r3, r3, #32
 8002cb2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3326      	adds	r3, #38	@ 0x26
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3326      	adds	r3, #38	@ 0x26
 8002cda:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f040 80a9 	bne.w	8002e34 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cf8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d00:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e08e      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	334d      	adds	r3, #77	@ 0x4d
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d143      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	@ 0x4d
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	334c      	adds	r3, #76	@ 0x4c
 8002d50:	2202      	movs	r2, #2
 8002d52:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3326      	adds	r3, #38	@ 0x26
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3326      	adds	r3, #38	@ 0x26
 8002d7a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d159      	bne.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d96:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d9e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e03f      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334d      	adds	r3, #77	@ 0x4d
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d126      	bne.n	8002e18 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	334d      	adds	r3, #77	@ 0x4d
 8002dda:	2202      	movs	r2, #2
 8002ddc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	3344      	adds	r3, #68	@ 0x44
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3344      	adds	r3, #68	@ 0x44
 8002e00:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	334c      	adds	r3, #76	@ 0x4c
 8002e12:	2204      	movs	r2, #4
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e00d      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334d      	adds	r3, #77	@ 0x4d
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	f000 8100 	beq.w	8003030 <HCD_HC_IN_IRQHandler+0xcca>
 8002e30:	e000      	b.n	8002e34 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e32:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	334c      	adds	r3, #76	@ 0x4c
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f004 fde4 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e50:	e0ef      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fd0c 	bl	8005878 <USB_ReadChInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e66:	2b40      	cmp	r3, #64	@ 0x40
 8002e68:	d12f      	bne.n	8002eca <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e76:	461a      	mov	r2, r3
 8002e78:	2340      	movs	r3, #64	@ 0x40
 8002e7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	331a      	adds	r3, #26
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3344      	adds	r3, #68	@ 0x44
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fa59 	bl	800637a <USB_HC_Halt>
 8002ec8:	e0b3      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 fcd0 	bl	8005878 <USB_ReadChInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	f040 80a7 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3326      	adds	r3, #38	@ 0x26
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d11b      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3344      	adds	r3, #68	@ 0x44
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334d      	adds	r3, #77	@ 0x4d
 8002f1e:	2204      	movs	r2, #4
 8002f20:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fa25 	bl	800637a <USB_HC_Halt>
 8002f30:	e03f      	b.n	8002fb2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3326      	adds	r3, #38	@ 0x26
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3326      	adds	r3, #38	@ 0x26
 8002f58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d129      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3344      	adds	r3, #68	@ 0x44
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	799b      	ldrb	r3, [r3, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HCD_HC_IN_IRQHandler+0xc2a>
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	331b      	adds	r3, #27
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d110      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334d      	adds	r3, #77	@ 0x4d
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 f9e4 	bl	800637a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331b      	adds	r3, #27
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d129      	bne.n	800301c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	331b      	adds	r3, #27
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	0151      	lsls	r1, r2, #5
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	0151      	lsls	r1, r2, #5
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	440a      	add	r2, r1
 8003012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003016:	f043 0320 	orr.w	r3, r3, #32
 800301a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e000      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003030:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f002 fc0e 	bl	8005878 <USB_ReadChInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b04      	cmp	r3, #4
 8003064:	d11b      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2304      	movs	r3, #4
 8003076:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	334d      	adds	r3, #77	@ 0x4d
 8003088:	2207      	movs	r2, #7
 800308a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f003 f970 	bl	800637a <USB_HC_Halt>
 800309a:	f000 bc89 	b.w	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fbe6 	bl	8005878 <USB_ReadChInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	f040 8082 	bne.w	80031bc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2320      	movs	r3, #32
 80030c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3319      	adds	r3, #25
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d124      	bne.n	800312a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3319      	adds	r3, #25
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	334c      	adds	r3, #76	@ 0x4c
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334d      	adds	r3, #77	@ 0x4d
 8003118:	2203      	movs	r2, #3
 800311a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f003 f928 	bl	800637a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	331a      	adds	r3, #26
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 8437 	bne.w	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	331b      	adds	r3, #27
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 842b 	bne.w	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3326      	adds	r3, #38	@ 0x26
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d009      	beq.n	8003184 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	331b      	adds	r3, #27
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	334d      	adds	r3, #77	@ 0x4d
 8003194:	2203      	movs	r2, #3
 8003196:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 f8ea 	bl	800637a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3344      	adds	r3, #68	@ 0x44
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e3f9      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fb57 	bl	8005878 <USB_ReadChInterrupts>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d4:	d111      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e2:	461a      	mov	r2, r3
 80031e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f8c1 	bl	800637a <USB_HC_Halt>
 80031f8:	e3da      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fb38 	bl	8005878 <USB_ReadChInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d168      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3344      	adds	r3, #68	@ 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f002 fb22 	bl	8005878 <USB_ReadChInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323a:	2b40      	cmp	r3, #64	@ 0x40
 800323c:	d112      	bne.n	8003264 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3319      	adds	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	2340      	movs	r3, #64	@ 0x40
 8003262:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	331b      	adds	r3, #27
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	331b      	adds	r3, #27
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	0151      	lsls	r1, r2, #5
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	440a      	add	r2, r1
 80032a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	2301      	movs	r3, #1
 80032be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 f84c 	bl	800637a <USB_HC_Halt>
 80032e2:	e365      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f002 fac3 	bl	8005878 <USB_ReadChInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b40      	cmp	r3, #64	@ 0x40
 80032fa:	d139      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	2205      	movs	r2, #5
 800330e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	331a      	adds	r3, #26
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3319      	adds	r3, #25
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3344      	adds	r3, #68	@ 0x44
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f003 f80f 	bl	800637a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2340      	movs	r3, #64	@ 0x40
 800336c:	6093      	str	r3, [r2, #8]
 800336e:	e31f      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fa7d 	bl	8005878 <USB_ReadChInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d11a      	bne.n	80033be <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003394:	461a      	mov	r2, r3
 8003396:	2308      	movs	r3, #8
 8003398:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334d      	adds	r3, #77	@ 0x4d
 80033aa:	2206      	movs	r2, #6
 80033ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 ffdf 	bl	800637a <USB_HC_Halt>
 80033bc:	e2f8      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fa56 	bl	8005878 <USB_ReadChInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d144      	bne.n	8003460 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3344      	adds	r3, #68	@ 0x44
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	334d      	adds	r3, #77	@ 0x4d
 80033fa:	2204      	movs	r2, #4
 80033fc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3319      	adds	r3, #25
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d114      	bne.n	800343e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3318      	adds	r3, #24
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3319      	adds	r3, #25
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f002 ff97 	bl	800637a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003458:	461a      	mov	r2, r3
 800345a:	2310      	movs	r3, #16
 800345c:	6093      	str	r3, [r2, #8]
 800345e:	e2a7      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f002 fa05 	bl	8005878 <USB_ReadChInterrupts>
 800346e:	4603      	mov	r3, r0
 8003470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003474:	2b80      	cmp	r3, #128	@ 0x80
 8003476:	f040 8083 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	799b      	ldrb	r3, [r3, #6]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d111      	bne.n	80034a6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	2207      	movs	r2, #7
 8003494:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 ff6b 	bl	800637a <USB_HC_Halt>
 80034a4:	e062      	b.n	800356c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3344      	adds	r3, #68	@ 0x44
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4403      	add	r3, r0
 80034c6:	3344      	adds	r3, #68	@ 0x44
 80034c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3344      	adds	r3, #68	@ 0x44
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d922      	bls.n	8003526 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3344      	adds	r3, #68	@ 0x44
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	334c      	adds	r3, #76	@ 0x4c
 8003504:	2204      	movs	r2, #4
 8003506:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334c      	adds	r3, #76	@ 0x4c
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f004 fa7a 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003524:	e022      	b.n	800356c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	334c      	adds	r3, #76	@ 0x4c
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003550:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003558:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	6093      	str	r3, [r2, #8]
 800357e:	e217      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f002 f975 	bl	8005878 <USB_ReadChInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003598:	d11b      	bne.n	80035d2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	334d      	adds	r3, #77	@ 0x4d
 80035aa:	2209      	movs	r2, #9
 80035ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 fedf 	bl	800637a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	461a      	mov	r2, r3
 80035ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ce:	6093      	str	r3, [r2, #8]
 80035d0:	e1ee      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 f94c 	bl	8005878 <USB_ReadChInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	f040 81df 	bne.w	80039aa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2302      	movs	r3, #2
 80035fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	@ 0x4d
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	f040 8093 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	334d      	adds	r3, #77	@ 0x4d
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	334c      	adds	r3, #76	@ 0x4c
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3326      	adds	r3, #38	@ 0x26
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d00b      	beq.n	800366c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3326      	adds	r3, #38	@ 0x26
 8003664:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003666:	2b03      	cmp	r3, #3
 8003668:	f040 8190 	bne.w	800398c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	799b      	ldrb	r3, [r3, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d115      	bne.n	80036a0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	333d      	adds	r3, #61	@ 0x3d
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2d8      	uxtb	r0, r3
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	333d      	adds	r3, #61	@ 0x3d
 800369c:	4602      	mov	r2, r0
 800369e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	799b      	ldrb	r3, [r3, #6]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	f040 8171 	bne.w	800398c <HCD_HC_OUT_IRQHandler+0x954>
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3334      	adds	r3, #52	@ 0x34
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8165 	beq.w	800398c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3334      	adds	r3, #52	@ 0x34
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4403      	add	r3, r0
 80036e2:	3328      	adds	r3, #40	@ 0x28
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	440b      	add	r3, r1
 80036e8:	1e59      	subs	r1, r3, #1
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4403      	add	r3, r0
 80036f8:	3328      	adds	r3, #40	@ 0x28
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003700:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 813f 	beq.w	800398c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	333d      	adds	r3, #61	@ 0x3d
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	f083 0301 	eor.w	r3, r3, #1
 8003726:	b2d8      	uxtb	r0, r3
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	333d      	adds	r3, #61	@ 0x3d
 8003736:	4602      	mov	r2, r0
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e127      	b.n	800398c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d120      	bne.n	8003794 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	334d      	adds	r3, #77	@ 0x4d
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	331b      	adds	r3, #27
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 8107 	bne.w	800398c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	334c      	adds	r3, #76	@ 0x4c
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e0fb      	b.n	800398c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d13a      	bne.n	8003820 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	334d      	adds	r3, #77	@ 0x4d
 80037ba:	2202      	movs	r2, #2
 80037bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	334c      	adds	r3, #76	@ 0x4c
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	331b      	adds	r3, #27
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 80d1 	bne.w	800398c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	331b      	adds	r3, #27
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	440a      	add	r2, r1
 8003814:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381c:	6053      	str	r3, [r2, #4]
 800381e:	e0b5      	b.n	800398c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	334d      	adds	r3, #77	@ 0x4d
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b05      	cmp	r3, #5
 8003834:	d114      	bne.n	8003860 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334d      	adds	r3, #77	@ 0x4d
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	334c      	adds	r3, #76	@ 0x4c
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e095      	b.n	800398c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	334d      	adds	r3, #77	@ 0x4d
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d114      	bne.n	80038a0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	334d      	adds	r3, #77	@ 0x4d
 8003886:	2202      	movs	r2, #2
 8003888:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334c      	adds	r3, #76	@ 0x4c
 800389a:	2205      	movs	r2, #5
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e075      	b.n	800398c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334d      	adds	r3, #77	@ 0x4d
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b07      	cmp	r3, #7
 80038b4:	d00a      	beq.n	80038cc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	334d      	adds	r3, #77	@ 0x4d
 80038c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d170      	bne.n	80039ae <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334d      	adds	r3, #77	@ 0x4d
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3344      	adds	r3, #68	@ 0x44
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4403      	add	r3, r0
 8003900:	3344      	adds	r3, #68	@ 0x44
 8003902:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3344      	adds	r3, #68	@ 0x44
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d914      	bls.n	8003944 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	3344      	adds	r3, #68	@ 0x44
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334c      	adds	r3, #76	@ 0x4c
 800393e:	2204      	movs	r2, #4
 8003940:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003942:	e022      	b.n	800398a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334c      	adds	r3, #76	@ 0x4c
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800396e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003976:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800398a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334c      	adds	r3, #76	@ 0x4c
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f004 f838 	bl	8007a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039a8:	e002      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80039ae:	bf00      	nop
  }
}
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b08a      	sub	sp, #40	@ 0x28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	0c5b      	lsrs	r3, r3, #17
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d004      	beq.n	80039fc <HCD_RXQLVL_IRQHandler+0x46>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	f000 80b6 	beq.w	8003b66 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039fa:	e0b7      	b.n	8003b6c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80b3 	beq.w	8003b6a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	332c      	adds	r3, #44	@ 0x2c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a7 	beq.w	8003b6a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3338      	adds	r3, #56	@ 0x38
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	18d1      	adds	r1, r2, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4403      	add	r3, r0
 8003a40:	3334      	adds	r3, #52	@ 0x34
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4299      	cmp	r1, r3
 8003a46:	f200 8083 	bhi.w	8003b50 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	332c      	adds	r3, #44	@ 0x2c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	b292      	uxth	r2, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f001 fe9c 	bl	80057a2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	332c      	adds	r3, #44	@ 0x2c
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	18d1      	adds	r1, r2, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4403      	add	r3, r0
 8003a8e:	332c      	adds	r3, #44	@ 0x2c
 8003a90:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3338      	adds	r3, #56	@ 0x38
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	18d1      	adds	r1, r2, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4403      	add	r3, r0
 8003ab6:	3338      	adds	r3, #56	@ 0x38
 8003ab8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	0cdb      	lsrs	r3, r3, #19
 8003aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ace:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3328      	adds	r3, #40	@ 0x28
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d13f      	bne.n	8003b6a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d03c      	beq.n	8003b6a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	333c      	adds	r3, #60	@ 0x3c
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2d8      	uxtb	r0, r3
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	333c      	adds	r3, #60	@ 0x3c
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	701a      	strb	r2, [r3, #0]
      break;
 8003b4e:	e00c      	b.n	8003b6a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334c      	adds	r3, #76	@ 0x4c
 8003b60:	2204      	movs	r2, #4
 8003b62:	701a      	strb	r2, [r3, #0]
      break;
 8003b64:	e001      	b.n	8003b6a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003b6a:	bf00      	nop
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003ba0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d10b      	bne.n	8003bc4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d102      	bne.n	8003bbc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f003 ff12 	bl	80079e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d132      	bne.n	8003c34 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d126      	bne.n	8003c2e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7a5b      	ldrb	r3, [r3, #9]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d113      	bne.n	8003c10 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003bee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bf2:	d106      	bne.n	8003c02 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 ff68 	bl	8005ad0 <USB_InitFSLSPClkSel>
 8003c00:	e011      	b.n	8003c26 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 ff61 	bl	8005ad0 <USB_InitFSLSPClkSel>
 8003c0e:	e00a      	b.n	8003c26 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	79db      	ldrb	r3, [r3, #7]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003c24:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f003 ff04 	bl	8007a34 <HAL_HCD_PortEnabled_Callback>
 8003c2c:	e002      	b.n	8003c34 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f003 ff0e 	bl	8007a50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d103      	bne.n	8003c46 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f043 0320 	orr.w	r3, r3, #32
 8003c44:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e12b      	b.n	8003ec6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f9dc 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	@ 0x24
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f001 fa20 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4a81      	ldr	r2, [pc, #516]	@ (8003ed0 <HAL_I2C_Init+0x274>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d807      	bhi.n	8003ce0 <HAL_I2C_Init+0x84>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a80      	ldr	r2, [pc, #512]	@ (8003ed4 <HAL_I2C_Init+0x278>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	bf94      	ite	ls
 8003cd8:	2301      	movls	r3, #1
 8003cda:	2300      	movhi	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e006      	b.n	8003cee <HAL_I2C_Init+0x92>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ed8 <HAL_I2C_Init+0x27c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bf94      	ite	ls
 8003ce8:	2301      	movls	r3, #1
 8003cea:	2300      	movhi	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e0e7      	b.n	8003ec6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a78      	ldr	r2, [pc, #480]	@ (8003edc <HAL_I2C_Init+0x280>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0c9b      	lsrs	r3, r3, #18
 8003d00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed0 <HAL_I2C_Init+0x274>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d802      	bhi.n	8003d30 <HAL_I2C_Init+0xd4>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	e009      	b.n	8003d44 <HAL_I2C_Init+0xe8>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	4a69      	ldr	r2, [pc, #420]	@ (8003ee0 <HAL_I2C_Init+0x284>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	3301      	adds	r3, #1
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	495c      	ldr	r1, [pc, #368]	@ (8003ed0 <HAL_I2C_Init+0x274>)
 8003d60:	428b      	cmp	r3, r1
 8003d62:	d819      	bhi.n	8003d98 <HAL_I2C_Init+0x13c>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e59      	subs	r1, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d78:	400b      	ands	r3, r1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_I2C_Init+0x138>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e59      	subs	r1, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d92:	e051      	b.n	8003e38 <HAL_I2C_Init+0x1dc>
 8003d94:	2304      	movs	r3, #4
 8003d96:	e04f      	b.n	8003e38 <HAL_I2C_Init+0x1dc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d111      	bne.n	8003dc4 <HAL_I2C_Init+0x168>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e012      	b.n	8003dea <HAL_I2C_Init+0x18e>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	0099      	lsls	r1, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Init+0x196>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e022      	b.n	8003e38 <HAL_I2C_Init+0x1dc>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10e      	bne.n	8003e18 <HAL_I2C_Init+0x1bc>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1e58      	subs	r0, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	440b      	add	r3, r1
 8003e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e16:	e00f      	b.n	8003e38 <HAL_I2C_Init+0x1dc>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1e58      	subs	r0, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	0099      	lsls	r1, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	6809      	ldr	r1, [r1, #0]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6911      	ldr	r1, [r2, #16]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	000186a0 	.word	0x000186a0
 8003ed4:	001e847f 	.word	0x001e847f
 8003ed8:	003d08ff 	.word	0x003d08ff
 8003edc:	431bde83 	.word	0x431bde83
 8003ee0:	10624dd3 	.word	0x10624dd3

08003ee4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e128      	b.n	8004148 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a90      	ldr	r2, [pc, #576]	@ (8004150 <HAL_I2S_Init+0x26c>)
 8003f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fd f8dd 	bl	80010d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2202      	movs	r2, #2
 8003f38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d060      	beq.n	8004004 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e001      	b.n	8003f54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d802      	bhi.n	8003f62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f62:	2001      	movs	r0, #1
 8003f64:	f001 f9c4 	bl	80052f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f72:	d125      	bne.n	8003fc0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	3305      	adds	r3, #5
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	e01f      	b.n	8003fde <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	3305      	adds	r3, #5
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e00e      	b.n	8003fde <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	3305      	adds	r3, #5
 8003fdc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4a5c      	ldr	r2, [pc, #368]	@ (8004154 <HAL_I2S_Init+0x270>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	08db      	lsrs	r3, r3, #3
 8003fe8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e003      	b.n	800400c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004004:	2302      	movs	r3, #2
 8004006:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d902      	bls.n	8004018 <HAL_I2S_Init+0x134>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2bff      	cmp	r3, #255	@ 0xff
 8004016:	d907      	bls.n	8004028 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e08f      	b.n	8004148 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	ea42 0103 	orr.w	r1, r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	430a      	orrs	r2, r1
 800403a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004046:	f023 030f 	bic.w	r3, r3, #15
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6851      	ldr	r1, [r2, #4]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6892      	ldr	r2, [r2, #8]
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68d2      	ldr	r2, [r2, #12]
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6992      	ldr	r2, [r2, #24]
 800405e:	430a      	orrs	r2, r1
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d161      	bne.n	8004138 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a38      	ldr	r2, [pc, #224]	@ (8004158 <HAL_I2S_Init+0x274>)
 8004078:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a37      	ldr	r2, [pc, #220]	@ (800415c <HAL_I2S_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_I2S_Init+0x1a4>
 8004084:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <HAL_I2S_Init+0x27c>)
 8004086:	e001      	b.n	800408c <HAL_I2S_Init+0x1a8>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	4932      	ldr	r1, [pc, #200]	@ (800415c <HAL_I2S_Init+0x278>)
 8004094:	428a      	cmp	r2, r1
 8004096:	d101      	bne.n	800409c <HAL_I2S_Init+0x1b8>
 8004098:	4a31      	ldr	r2, [pc, #196]	@ (8004160 <HAL_I2S_Init+0x27c>)
 800409a:	e001      	b.n	80040a0 <HAL_I2S_Init+0x1bc>
 800409c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80040a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040a4:	f023 030f 	bic.w	r3, r3, #15
 80040a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <HAL_I2S_Init+0x278>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_I2S_Init+0x1d4>
 80040b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004160 <HAL_I2S_Init+0x27c>)
 80040b6:	e001      	b.n	80040bc <HAL_I2S_Init+0x1d8>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040bc:	2202      	movs	r2, #2
 80040be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a25      	ldr	r2, [pc, #148]	@ (800415c <HAL_I2S_Init+0x278>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_I2S_Init+0x1ea>
 80040ca:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <HAL_I2S_Init+0x27c>)
 80040cc:	e001      	b.n	80040d2 <HAL_I2S_Init+0x1ee>
 80040ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040de:	d003      	beq.n	80040e8 <HAL_I2S_Init+0x204>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e001      	b.n	80040f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040fe:	4313      	orrs	r3, r2
 8004100:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004108:	4313      	orrs	r3, r2
 800410a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004112:	4313      	orrs	r3, r2
 8004114:	b29a      	uxth	r2, r3
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	4313      	orrs	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004120:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <HAL_I2S_Init+0x278>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_I2S_Init+0x24c>
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <HAL_I2S_Init+0x27c>)
 800412e:	e001      	b.n	8004134 <HAL_I2S_Init+0x250>
 8004130:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004134:	897a      	ldrh	r2, [r7, #10]
 8004136:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	0800425b 	.word	0x0800425b
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	08004371 	.word	0x08004371
 800415c:	40003800 	.word	0x40003800
 8004160:	40003400 	.word	0x40003400

08004164 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10e      	bne.n	80041f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffb8 	bl	8004164 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	b292      	uxth	r2, r2
 8004210:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10e      	bne.n	8004252 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004242:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff93 	bl	8004178 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b04      	cmp	r3, #4
 8004274:	d13a      	bne.n	80042ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d109      	bne.n	8004294 <I2S_IRQHandler+0x3a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d102      	bne.n	8004294 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ffb4 	bl	80041fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d126      	bne.n	80042ec <I2S_IRQHandler+0x92>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d11f      	bne.n	80042ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f043 0202 	orr.w	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff50 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d136      	bne.n	8004366 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d109      	bne.n	8004316 <I2S_IRQHandler+0xbc>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430c:	2b80      	cmp	r3, #128	@ 0x80
 800430e:	d102      	bne.n	8004316 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff45 	bl	80041a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d122      	bne.n	8004366 <I2S_IRQHandler+0x10c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d11b      	bne.n	8004366 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800433c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff13 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a92      	ldr	r2, [pc, #584]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800438a:	4b92      	ldr	r3, [pc, #584]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800438c:	e001      	b.n	8004392 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800438e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a8b      	ldr	r2, [pc, #556]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043a8:	4b8a      	ldr	r3, [pc, #552]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043aa:	e001      	b.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043bc:	d004      	beq.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 8099 	bne.w	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d107      	bne.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f925 	bl	800462c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9c8 	bl	800478c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d13a      	bne.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d035      	beq.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6e      	ldr	r2, [pc, #440]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800441a:	4b6e      	ldr	r3, [pc, #440]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800441c:	e001      	b.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800441e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4969      	ldr	r1, [pc, #420]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442a:	428b      	cmp	r3, r1
 800442c:	d101      	bne.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800442e:	4b69      	ldr	r3, [pc, #420]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004430:	e001      	b.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004432:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004436:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800443a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800444a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fe88 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	f040 80c3 	bne.w	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80bd 	beq.w	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a49      	ldr	r2, [pc, #292]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044ae:	4b49      	ldr	r3, [pc, #292]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044b0:	e001      	b.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4944      	ldr	r1, [pc, #272]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044be:	428b      	cmp	r3, r1
 80044c0:	d101      	bne.n	80044c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80044c2:	4b44      	ldr	r3, [pc, #272]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044c4:	e001      	b.n	80044ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80044c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fe4a 	bl	800418c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044f8:	e089      	b.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d107      	bne.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8be 	bl	8004690 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8fd 	bl	8004728 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d12f      	bne.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02a      	beq.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004550:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800455c:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800455e:	e001      	b.n	8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4919      	ldr	r1, [pc, #100]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800456c:	428b      	cmp	r3, r1
 800456e:	d101      	bne.n	8004574 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004570:	4b18      	ldr	r3, [pc, #96]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004572:	e001      	b.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004578:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800457c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fdfa 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d136      	bne.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d031      	beq.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a07      	ldr	r2, [pc, #28]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045b6:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045b8:	e001      	b.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4902      	ldr	r1, [pc, #8]	@ (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045c6:	428b      	cmp	r3, r1
 80045c8:	d106      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80045ca:	4b02      	ldr	r3, [pc, #8]	@ (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045cc:	e006      	b.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80045ce:	bf00      	nop
 80045d0:	40003800 	.word	0x40003800
 80045d4:	40003400 	.word	0x40003400
 80045d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045e0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fdc0 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800460c:	e000      	b.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800460e:	bf00      	nop
}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	1c99      	adds	r1, r3, #2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6251      	str	r1, [r2, #36]	@ 0x24
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d113      	bne.n	8004686 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800466c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffc9 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	1c99      	adds	r1, r3, #2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80046a2:	8819      	ldrh	r1, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <I2SEx_TxISR_I2SExt+0x22>
 80046ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046b0:	e001      	b.n	80046b6 <I2SEx_TxISR_I2SExt+0x26>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046b6:	460a      	mov	r2, r1
 80046b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d121      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <I2SEx_TxISR_I2SExt+0x50>
 80046dc:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046de:	e001      	b.n	80046e4 <I2SEx_TxISR_I2SExt+0x54>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	490d      	ldr	r1, [pc, #52]	@ (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d101      	bne.n	80046f4 <I2SEx_TxISR_I2SExt+0x64>
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046f2:	e001      	b.n	80046f8 <I2SEx_TxISR_I2SExt+0x68>
 80046f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff81 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40003800 	.word	0x40003800
 8004724:	40003400 	.word	0x40003400

08004728 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68d8      	ldr	r0, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	1c99      	adds	r1, r3, #2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004740:	b282      	uxth	r2, r0
 8004742:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d113      	bne.n	8004784 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800476a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ff4a 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a20      	ldr	r2, [pc, #128]	@ (800481c <I2SEx_RxISR_I2SExt+0x90>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <I2SEx_RxISR_I2SExt+0x16>
 800479e:	4b20      	ldr	r3, [pc, #128]	@ (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047a0:	e001      	b.n	80047a6 <I2SEx_RxISR_I2SExt+0x1a>
 80047a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a6:	68d8      	ldr	r0, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	1c99      	adds	r1, r3, #2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80047b2:	b282      	uxth	r2, r0
 80047b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d121      	bne.n	8004812 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a12      	ldr	r2, [pc, #72]	@ (800481c <I2SEx_RxISR_I2SExt+0x90>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <I2SEx_RxISR_I2SExt+0x50>
 80047d8:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047da:	e001      	b.n	80047e0 <I2SEx_RxISR_I2SExt+0x54>
 80047dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	490d      	ldr	r1, [pc, #52]	@ (800481c <I2SEx_RxISR_I2SExt+0x90>)
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d101      	bne.n	80047f0 <I2SEx_RxISR_I2SExt+0x64>
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047ee:	e001      	b.n	80047f4 <I2SEx_RxISR_I2SExt+0x68>
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff03 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40003800 	.word	0x40003800
 8004820:	40003400 	.word	0x40003400

08004824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e267      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d075      	beq.n	800492e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004842:	4b88      	ldr	r3, [pc, #544]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00c      	beq.n	8004868 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800484e:	4b85      	ldr	r3, [pc, #532]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004856:	2b08      	cmp	r3, #8
 8004858:	d112      	bne.n	8004880 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4b82      	ldr	r3, [pc, #520]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004866:	d10b      	bne.n	8004880 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	4b7e      	ldr	r3, [pc, #504]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05b      	beq.n	800492c <HAL_RCC_OscConfig+0x108>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d157      	bne.n	800492c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e242      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d106      	bne.n	8004898 <HAL_RCC_OscConfig+0x74>
 800488a:	4b76      	ldr	r3, [pc, #472]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a75      	ldr	r2, [pc, #468]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e01d      	b.n	80048d4 <HAL_RCC_OscConfig+0xb0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x98>
 80048a2:	4b70      	ldr	r3, [pc, #448]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6f      	ldr	r2, [pc, #444]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0xb0>
 80048bc:	4b69      	ldr	r3, [pc, #420]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a68      	ldr	r2, [pc, #416]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	4b66      	ldr	r3, [pc, #408]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a65      	ldr	r2, [pc, #404]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d013      	beq.n	8004904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fc fdd2 	bl	8001484 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fc fdce 	bl	8001484 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	@ 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e207      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0xc0>
 8004902:	e014      	b.n	800492e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fc fdbe 	bl	8001484 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490c:	f7fc fdba 	bl	8001484 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	@ 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e1f3      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	4b51      	ldr	r3, [pc, #324]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0xe8>
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d063      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800493a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004946:	4b47      	ldr	r3, [pc, #284]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800494e:	2b08      	cmp	r3, #8
 8004950:	d11c      	bne.n	800498c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b44      	ldr	r3, [pc, #272]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	4b41      	ldr	r3, [pc, #260]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x152>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e1c7      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4937      	ldr	r1, [pc, #220]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	e03a      	b.n	8004a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d020      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004994:	4b34      	ldr	r3, [pc, #208]	@ (8004a68 <HAL_RCC_OscConfig+0x244>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fc fd73 	bl	8001484 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fc fd6f 	bl	8001484 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e1a8      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4925      	ldr	r1, [pc, #148]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
 80049d4:	e015      	b.n	8004a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d6:	4b24      	ldr	r3, [pc, #144]	@ (8004a68 <HAL_RCC_OscConfig+0x244>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fc fd52 	bl	8001484 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e4:	f7fc fd4e 	bl	8001484 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e187      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d036      	beq.n	8004a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a16:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <HAL_RCC_OscConfig+0x248>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fc fd32 	bl	8001484 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a24:	f7fc fd2e 	bl	8001484 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e167      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x200>
 8004a42:	e01b      	b.n	8004a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a44:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <HAL_RCC_OscConfig+0x248>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fc fd1b 	bl	8001484 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	e00e      	b.n	8004a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fc fd17 	bl	8001484 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d907      	bls.n	8004a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e150      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	42470000 	.word	0x42470000
 8004a6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b88      	ldr	r3, [pc, #544]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ea      	bne.n	8004a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8097 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b81      	ldr	r3, [pc, #516]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b77      	ldr	r3, [pc, #476]	@ (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d118      	bne.n	8004af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b74      	ldr	r3, [pc, #464]	@ (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a73      	ldr	r2, [pc, #460]	@ (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fc fcd7 	bl	8001484 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ada:	f7fc fcd3 	bl	8001484 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e10c      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	4b6a      	ldr	r3, [pc, #424]	@ (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <HAL_RCC_OscConfig+0x2ea>
 8004b00:	4b64      	ldr	r3, [pc, #400]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b04:	4a63      	ldr	r2, [pc, #396]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b0c:	e01c      	b.n	8004b48 <HAL_RCC_OscConfig+0x324>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x30c>
 8004b16:	4b5f      	ldr	r3, [pc, #380]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1a:	4a5e      	ldr	r2, [pc, #376]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b22:	4b5c      	ldr	r3, [pc, #368]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b26:	4a5b      	ldr	r2, [pc, #364]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0x324>
 8004b30:	4b58      	ldr	r3, [pc, #352]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b34:	4a57      	ldr	r2, [pc, #348]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3c:	4b55      	ldr	r3, [pc, #340]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b40:	4a54      	ldr	r2, [pc, #336]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f023 0304 	bic.w	r3, r3, #4
 8004b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d015      	beq.n	8004b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fc fc98 	bl	8001484 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b58:	f7fc fc94 	bl	8001484 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0cb      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	4b49      	ldr	r3, [pc, #292]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ee      	beq.n	8004b58 <HAL_RCC_OscConfig+0x334>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7c:	f7fc fc82 	bl	8001484 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fc fc7e 	bl	8001484 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e0b5      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ee      	bne.n	8004b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b39      	ldr	r3, [pc, #228]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb0:	4a38      	ldr	r2, [pc, #224]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a1 	beq.w	8004d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc2:	4b34      	ldr	r3, [pc, #208]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d05c      	beq.n	8004c88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d141      	bne.n	8004c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b31      	ldr	r3, [pc, #196]	@ (8004c9c <HAL_RCC_OscConfig+0x478>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fc fc52 	bl	8001484 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fc fc4e 	bl	8001484 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e087      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	4b27      	ldr	r3, [pc, #156]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	019b      	lsls	r3, r3, #6
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	491b      	ldr	r1, [pc, #108]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c9c <HAL_RCC_OscConfig+0x478>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fc fc27 	bl	8001484 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fc fc23 	bl	8001484 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e05c      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4c:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x416>
 8004c58:	e054      	b.n	8004d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <HAL_RCC_OscConfig+0x478>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fc fc10 	bl	8001484 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc fc0c 	bl	8001484 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e045      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x444>
 8004c86:	e03d      	b.n	8004d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e038      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x4ec>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d028      	beq.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d121      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d11a      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800

08004d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0cc      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d28:	4b68      	ldr	r3, [pc, #416]	@ (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d90c      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b65      	ldr	r3, [pc, #404]	@ (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b63      	ldr	r3, [pc, #396]	@ (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b8      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d68:	4b59      	ldr	r3, [pc, #356]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d80:	4b53      	ldr	r3, [pc, #332]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a52      	ldr	r2, [pc, #328]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b50      	ldr	r3, [pc, #320]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	494d      	ldr	r1, [pc, #308]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d044      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b47      	ldr	r3, [pc, #284]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d119      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e06f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e067      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df2:	4b37      	ldr	r3, [pc, #220]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 0203 	bic.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4934      	ldr	r1, [pc, #208]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e04:	f7fc fb3e 	bl	8001484 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0c:	f7fc fb3a 	bl	8001484 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e04f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 020c 	and.w	r2, r3, #12
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d1eb      	bne.n	8004e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e34:	4b25      	ldr	r3, [pc, #148]	@ (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d20c      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e42:	4b22      	ldr	r3, [pc, #136]	@ (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e032      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e68:	4b19      	ldr	r3, [pc, #100]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4916      	ldr	r1, [pc, #88]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e86:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	490e      	ldr	r1, [pc, #56]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e9a:	f000 f821 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	490a      	ldr	r1, [pc, #40]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8004eac:	5ccb      	ldrb	r3, [r1, r3]
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	4a09      	ldr	r2, [pc, #36]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004eb6:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <HAL_RCC_ClockConfig+0x1c8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fc fa9e 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023c00 	.word	0x40023c00
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	08008050 	.word	0x08008050
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	20000004 	.word	0x20000004

08004ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee4:	b094      	sub	sp, #80	@ 0x50
 8004ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef8:	4b79      	ldr	r3, [pc, #484]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d00d      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x40>
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	f200 80e1 	bhi.w	80050cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d003      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f12:	e0db      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b73      	ldr	r3, [pc, #460]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f18:	e0db      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f1a:	4b73      	ldr	r3, [pc, #460]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f1e:	e0d8      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f20:	4b6f      	ldr	r3, [pc, #444]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d063      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f36:	4b6a      	ldr	r3, [pc, #424]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f52:	4622      	mov	r2, r4
 8004f54:	462b      	mov	r3, r5
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	0159      	lsls	r1, r3, #5
 8004f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f64:	0150      	lsls	r0, r2, #5
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	1a51      	subs	r1, r2, r1
 8004f6e:	6139      	str	r1, [r7, #16]
 8004f70:	4629      	mov	r1, r5
 8004f72:	eb63 0301 	sbc.w	r3, r3, r1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f84:	4659      	mov	r1, fp
 8004f86:	018b      	lsls	r3, r1, #6
 8004f88:	4651      	mov	r1, sl
 8004f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8e:	4651      	mov	r1, sl
 8004f90:	018a      	lsls	r2, r1, #6
 8004f92:	4651      	mov	r1, sl
 8004f94:	ebb2 0801 	subs.w	r8, r2, r1
 8004f98:	4659      	mov	r1, fp
 8004f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fb2:	4690      	mov	r8, r2
 8004fb4:	4699      	mov	r9, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	eb18 0303 	adds.w	r3, r8, r3
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	eb49 0303 	adc.w	r3, r9, r3
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	024b      	lsls	r3, r1, #9
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fdc:	4621      	mov	r1, r4
 8004fde:	024a      	lsls	r2, r1, #9
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ff0:	f7fb f8ea 	bl	80001c8 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ffc:	e058      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffe:	4b38      	ldr	r3, [pc, #224]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	099b      	lsrs	r3, r3, #6
 8005004:	2200      	movs	r2, #0
 8005006:	4618      	mov	r0, r3
 8005008:	4611      	mov	r1, r2
 800500a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
 8005014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	f04f 0000 	mov.w	r0, #0
 8005020:	f04f 0100 	mov.w	r1, #0
 8005024:	0159      	lsls	r1, r3, #5
 8005026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800502a:	0150      	lsls	r0, r2, #5
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4641      	mov	r1, r8
 8005032:	ebb2 0a01 	subs.w	sl, r2, r1
 8005036:	4649      	mov	r1, r9
 8005038:	eb63 0b01 	sbc.w	fp, r3, r1
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800504c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005050:	ebb2 040a 	subs.w	r4, r2, sl
 8005054:	eb63 050b 	sbc.w	r5, r3, fp
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	00eb      	lsls	r3, r5, #3
 8005062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005066:	00e2      	lsls	r2, r4, #3
 8005068:	4614      	mov	r4, r2
 800506a:	461d      	mov	r5, r3
 800506c:	4643      	mov	r3, r8
 800506e:	18e3      	adds	r3, r4, r3
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	464b      	mov	r3, r9
 8005074:	eb45 0303 	adc.w	r3, r5, r3
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005086:	4629      	mov	r1, r5
 8005088:	028b      	lsls	r3, r1, #10
 800508a:	4621      	mov	r1, r4
 800508c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005090:	4621      	mov	r1, r4
 8005092:	028a      	lsls	r2, r1, #10
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509a:	2200      	movs	r2, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	61fa      	str	r2, [r7, #28]
 80050a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a4:	f7fb f890 	bl	80001c8 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4613      	mov	r3, r2
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	3301      	adds	r3, #1
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3750      	adds	r7, #80	@ 0x50
 80050d8:	46bd      	mov	sp, r7
 80050da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	007a1200 	.word	0x007a1200

080050ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f0:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <HAL_RCC_GetHCLKFreq+0x14>)
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000000 	.word	0x20000000

08005104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005108:	f7ff fff0 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0a9b      	lsrs	r3, r3, #10
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4903      	ldr	r1, [pc, #12]	@ (8005128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023800 	.word	0x40023800
 8005128:	08008060 	.word	0x08008060

0800512c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005150:	2b00      	cmp	r3, #0
 8005152:	d035      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005154:	4b62      	ldr	r3, [pc, #392]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800515a:	f7fc f993 	bl	8001484 <HAL_GetTick>
 800515e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005162:	f7fc f98f 	bl	8001484 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e0b0      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005174:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	019a      	lsls	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	071b      	lsls	r3, r3, #28
 800518c:	4955      	ldr	r1, [pc, #340]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005194:	4b52      	ldr	r3, [pc, #328]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519a:	f7fc f973 	bl	8001484 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051a2:	f7fc f96f 	bl	8001484 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e090      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b4:	4b4b      	ldr	r3, [pc, #300]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8083 	beq.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	4b44      	ldr	r3, [pc, #272]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	4a43      	ldr	r2, [pc, #268]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051de:	4b41      	ldr	r3, [pc, #260]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ea:	4b3f      	ldr	r3, [pc, #252]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3e      	ldr	r2, [pc, #248]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051f6:	f7fc f945 	bl	8001484 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fe:	f7fc f941 	bl	8001484 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e062      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005210:	4b35      	ldr	r3, [pc, #212]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800521c:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005224:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02f      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d028      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800523a:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005242:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005244:	4b29      	ldr	r3, [pc, #164]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800524a:	4b28      	ldr	r3, [pc, #160]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005256:	4b23      	ldr	r3, [pc, #140]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d114      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005262:	f7fc f90f 	bl	8001484 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	e00a      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fc f90b 	bl	8001484 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e02a      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	4b18      	ldr	r3, [pc, #96]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ee      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005298:	d10d      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800529a:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80052aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ae:	490d      	ldr	r1, [pc, #52]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
 80052b4:	e005      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052b6:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052c0:	6093      	str	r3, [r2, #8]
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ce:	4905      	ldr	r1, [pc, #20]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	42470068 	.word	0x42470068
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40007000 	.word	0x40007000
 80052ec:	42470e40 	.word	0x42470e40

080052f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d13f      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800530e:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005316:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d006      	beq.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005324:	d12f      	bne.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005326:	4b1f      	ldr	r3, [pc, #124]	@ (80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005328:	617b      	str	r3, [r7, #20]
          break;
 800532a:	e02f      	b.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800532c:	4b1c      	ldr	r3, [pc, #112]	@ (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005338:	d108      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800533a:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005342:	4a19      	ldr	r2, [pc, #100]	@ (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e007      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800534c:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005354:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005356:	fbb2 f3f3 	udiv	r3, r2, r3
 800535a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800535c:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005376:	0f1b      	lsrs	r3, r3, #28
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	617b      	str	r3, [r7, #20]
          break;
 8005384:	e002      	b.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
          break;
 800538a:	bf00      	nop
        }
      }
      break;
 800538c:	e000      	b.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800538e:	bf00      	nop
    }
  }
  return frequency;
 8005390:	697b      	ldr	r3, [r7, #20]
}
 8005392:	4618      	mov	r0, r3
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00bb8000 	.word	0x00bb8000
 80053a8:	007a1200 	.word	0x007a1200
 80053ac:	00f42400 	.word	0x00f42400

080053b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07b      	b.n	80054ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d2:	d009      	beq.n	80053e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
 80053da:	e005      	b.n	80053e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fb fee4 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800541e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f003 0104 	and.w	r1, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	f003 0210 	and.w	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c2:	b084      	sub	sp, #16
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	f107 001c 	add.w	r0, r7, #28
 80054d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054d4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d123      	bne.n	8005524 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005504:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9dc 	bl	80058d6 <USB_CoreReset>
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]
 8005522:	e01b      	b.n	800555c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f9d0 	bl	80058d6 <USB_CoreReset>
 8005536:	4603      	mov	r3, r0
 8005538:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800553a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38
 800554e:	e005      	b.n	800555c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800555c:	7fbb      	ldrb	r3, [r7, #30]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d10b      	bne.n	800557a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f043 0206 	orr.w	r2, r3, #6
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f043 0220 	orr.w	r2, r3, #32
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005586:	b004      	add	sp, #16
 8005588:	4770      	bx	lr

0800558a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f023 0201 	bic.w	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d115      	bne.n	800561c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055fc:	200a      	movs	r0, #10
 80055fe:	f7fb ff4d 	bl	800149c <HAL_Delay>
      ms += 10U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	330a      	adds	r3, #10
 8005606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f956 	bl	80058ba <USB_GetMode>
 800560e:	4603      	mov	r3, r0
 8005610:	2b01      	cmp	r3, #1
 8005612:	d01e      	beq.n	8005652 <USB_SetCurrentMode+0x84>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2bc7      	cmp	r3, #199	@ 0xc7
 8005618:	d9f0      	bls.n	80055fc <USB_SetCurrentMode+0x2e>
 800561a:	e01a      	b.n	8005652 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d115      	bne.n	800564e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800562e:	200a      	movs	r0, #10
 8005630:	f7fb ff34 	bl	800149c <HAL_Delay>
      ms += 10U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	330a      	adds	r3, #10
 8005638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f93d 	bl	80058ba <USB_GetMode>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <USB_SetCurrentMode+0x84>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2bc7      	cmp	r3, #199	@ 0xc7
 800564a:	d9f0      	bls.n	800562e <USB_SetCurrentMode+0x60>
 800564c:	e001      	b.n	8005652 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e005      	b.n	800565e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2bc8      	cmp	r3, #200	@ 0xc8
 8005656:	d101      	bne.n	800565c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005680:	d901      	bls.n	8005686 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e01b      	b.n	80056be <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	daf2      	bge.n	8005674 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	019b      	lsls	r3, r3, #6
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056aa:	d901      	bls.n	80056b0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d0f0      	beq.n	800569e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056e2:	d901      	bls.n	80056e8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e018      	b.n	800571a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	daf2      	bge.n	80056d6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2210      	movs	r2, #16
 80056f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005706:	d901      	bls.n	800570c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e006      	b.n	800571a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d0f0      	beq.n	80056fa <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005726:	b480      	push	{r7}
 8005728:	b089      	sub	sp, #36	@ 0x24
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	4611      	mov	r1, r2
 8005732:	461a      	mov	r2, r3
 8005734:	460b      	mov	r3, r1
 8005736:	71fb      	strb	r3, [r7, #7]
 8005738:	4613      	mov	r3, r2
 800573a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005744:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d123      	bne.n	8005794 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800574c:	88bb      	ldrh	r3, [r7, #4]
 800574e:	3303      	adds	r3, #3
 8005750:	089b      	lsrs	r3, r3, #2
 8005752:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e018      	b.n	800578c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	031a      	lsls	r2, r3, #12
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	4413      	add	r3, r2
 8005762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005766:	461a      	mov	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	3301      	adds	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3301      	adds	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	3301      	adds	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	3301      	adds	r3, #1
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	429a      	cmp	r2, r3
 8005792:	d3e2      	bcc.n	800575a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	@ 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b08b      	sub	sp, #44	@ 0x2c
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	e014      	b.n	80057f8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	3301      	adds	r3, #1
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	3301      	adds	r3, #1
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	3301      	adds	r3, #1
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	3301      	adds	r3, #1
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	3301      	adds	r3, #1
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d3e6      	bcc.n	80057ce <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005800:	8bfb      	ldrh	r3, [r7, #30]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01e      	beq.n	8005844 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005810:	461a      	mov	r2, r3
 8005812:	f107 0310 	add.w	r3, r7, #16
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	701a      	strb	r2, [r3, #0]
      i++;
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	3301      	adds	r3, #1
 8005830:	623b      	str	r3, [r7, #32]
      pDest++;
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	3301      	adds	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005838:	8bfb      	ldrh	r3, [r7, #30]
 800583a:	3b01      	subs	r3, #1
 800583c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800583e:	8bfb      	ldrh	r3, [r7, #30]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ea      	bne.n	800581a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005846:	4618      	mov	r0, r3
 8005848:	372c      	adds	r7, #44	@ 0x2c
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4013      	ands	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058ac:	68bb      	ldr	r3, [r7, #8]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0301 	and.w	r3, r3, #1
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ee:	d901      	bls.n	80058f4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e022      	b.n	800593a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	daf2      	bge.n	80058e2 <USB_CoreReset+0xc>

  count = 10U;
 80058fc:	230a      	movs	r3, #10
 80058fe:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005900:	e002      	b.n	8005908 <USB_CoreReset+0x32>
  {
    count--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b01      	subs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f9      	bne.n	8005902 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005926:	d901      	bls.n	800592c <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e006      	b.n	800593a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d0f0      	beq.n	800591a <USB_CoreReset+0x44>

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005948:	b084      	sub	sp, #16
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005968:	461a      	mov	r2, r3
 800596a:	2300      	movs	r3, #0
 800596c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005972:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d119      	bne.n	80059d2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800599e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10a      	bne.n	80059bc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80059b4:	f043 0304 	orr.w	r3, r3, #4
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e014      	b.n	80059e6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80059ca:	f023 0304 	bic.w	r3, r3, #4
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	e009      	b.n	80059e6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059e6:	2110      	movs	r1, #16
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fe3c 	bl	8005666 <USB_FlushTxFifo>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fe66 	bl	80056ca <USB_FlushRxFifo>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	e015      	b.n	8005a3a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a3e:	461a      	mov	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d3e3      	bcc.n	8005a0e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <USB_HostInit+0x170>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d10b      	bne.n	8005a74 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a62:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <USB_HostInit+0x174>)
 8005a68:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	@ (8005ac0 <USB_HostInit+0x178>)
 8005a6e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005a72:	e009      	b.n	8005a88 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2280      	movs	r2, #128	@ 0x80
 8005a78:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a11      	ldr	r2, [pc, #68]	@ (8005ac4 <USB_HostInit+0x17c>)
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a11      	ldr	r2, [pc, #68]	@ (8005ac8 <USB_HostInit+0x180>)
 8005a84:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f043 0210 	orr.w	r2, r3, #16
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <USB_HostInit+0x184>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ab4:	b004      	add	sp, #16
 8005ab6:	4770      	bx	lr
 8005ab8:	40040000 	.word	0x40040000
 8005abc:	01000200 	.word	0x01000200
 8005ac0:	00e00300 	.word	0x00e00300
 8005ac4:	00600080 	.word	0x00600080
 8005ac8:	004000e0 	.word	0x004000e0
 8005acc:	a3200008 	.word	0xa3200008

08005ad0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d107      	bne.n	8005b22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b1e:	6053      	str	r3, [r2, #4]
 8005b20:	e00c      	b.n	8005b3c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d107      	bne.n	8005b38 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005b34:	6053      	str	r3, [r2, #4]
 8005b36:	e001      	b.n	8005b3c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b6e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <USB_DriveVbus+0x44>
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d106      	bne.n	8005b8e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b8c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b98:	d109      	bne.n	8005bae <USB_DriveVbus+0x64>
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ba8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0c5b      	lsrs	r3, r3, #17
 8005bda:	f003 0303 	and.w	r3, r3, #3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	b29b      	uxth	r3, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	4608      	mov	r0, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	70fb      	strb	r3, [r7, #3]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	70bb      	strb	r3, [r7, #2]
 8005c22:	4613      	mov	r3, r2
 8005c24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d87c      	bhi.n	8005d44 <USB_HC_Init+0x138>
 8005c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <USB_HC_Init+0x44>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005d07 	.word	0x08005d07
 8005c58:	08005c61 	.word	0x08005c61
 8005c5c:	08005cc9 	.word	0x08005cc9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005c72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da10      	bge.n	8005c9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c9a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005c9c:	e055      	b.n	8005d4a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a6f      	ldr	r2, [pc, #444]	@ (8005e60 <USB_HC_Init+0x254>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d151      	bne.n	8005d4a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005cc4:	60d3      	str	r3, [r2, #12]
      break;
 8005cc6:	e040      	b.n	8005d4a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005cda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da34      	bge.n	8005d4e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d02:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d04:	e023      	b.n	8005d4e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d12:	461a      	mov	r2, r3
 8005d14:	f240 2325 	movw	r3, #549	@ 0x225
 8005d18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da17      	bge.n	8005d52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d3c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005d40:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d42:	e006      	b.n	8005d52 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77fb      	strb	r3, [r7, #31]
      break;
 8005d48:	e004      	b.n	8005d54 <USB_HC_Init+0x148>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <USB_HC_Init+0x148>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <USB_HC_Init+0x148>
      break;
 8005d52:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d60:	461a      	mov	r2, r3
 8005d62:	2300      	movs	r3, #0
 8005d64:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005da0:	4313      	orrs	r3, r2
 8005da2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005db0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da03      	bge.n	8005dc0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e001      	b.n	8005dc4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fef9 	bl	8005bbc <USB_GetHostSpeed>
 8005dca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005dcc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d106      	bne.n	8005de2 <USB_HC_Init+0x1d6>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d003      	beq.n	8005de2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005dda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e001      	b.n	8005de6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005de6:	787b      	ldrb	r3, [r7, #1]
 8005de8:	059b      	lsls	r3, r3, #22
 8005dea:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dee:	78bb      	ldrb	r3, [r7, #2]
 8005df0:	02db      	lsls	r3, r3, #11
 8005df2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005df6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005df8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dfc:	049b      	lsls	r3, r3, #18
 8005dfe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e02:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005e04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e0a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e24:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d003      	beq.n	8005e36 <USB_HC_Init+0x22a>
 8005e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10f      	bne.n	8005e56 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e54:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40040000 	.word	0x40040000

08005e64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	@ 0x30
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e80:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a5d      	ldr	r2, [pc, #372]	@ (8005ffc <USB_HC_StartXfer+0x198>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d12f      	bne.n	8005eea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d11c      	bne.n	8005eca <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	7c9b      	ldrb	r3, [r3, #18]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <USB_HC_StartXfer+0x3c>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	7c9b      	ldrb	r3, [r3, #18]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d124      	bne.n	8005eea <USB_HC_StartXfer+0x86>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	799b      	ldrb	r3, [r3, #6]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d120      	bne.n	8005eea <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec6:	60d3      	str	r3, [r2, #12]
 8005ec8:	e00f      	b.n	8005eea <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <USB_HC_StartXfer+0x86>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	795b      	ldrb	r3, [r3, #5]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d107      	bne.n	8005eea <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fb6b 	bl	80065bc <USB_DoPing>
        return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e232      	b.n	8006350 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	799b      	ldrb	r3, [r3, #6]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d158      	bne.n	8005fa4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005efe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	8a92      	ldrh	r2, [r2, #20]
 8005f04:	fb03 f202 	mul.w	r2, r3, r2
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	61da      	str	r2, [r3, #28]
 8005f0c:	e07c      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	7c9b      	ldrb	r3, [r3, #18]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d130      	bne.n	8005f78 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	2bbc      	cmp	r3, #188	@ 0xbc
 8005f1c:	d918      	bls.n	8005f50 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	8a9b      	ldrh	r3, [r3, #20]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d003      	beq.n	8005f40 <USB_HC_StartXfer+0xdc>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d103      	bne.n	8005f48 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2202      	movs	r2, #2
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	e05f      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	e05b      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d007      	beq.n	8005f70 <USB_HC_StartXfer+0x10c>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d003      	beq.n	8005f70 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e04b      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2203      	movs	r2, #3
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	e047      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10d      	bne.n	8005f9a <USB_HC_StartXfer+0x136>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	8a92      	ldrh	r2, [r2, #20]
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d907      	bls.n	8005f9a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	8a92      	ldrh	r2, [r2, #20]
 8005f90:	fb03 f202 	mul.w	r2, r3, r2
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61da      	str	r2, [r3, #28]
 8005f98:	e036      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6a1a      	ldr	r2, [r3, #32]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61da      	str	r2, [r3, #28]
 8005fa2:	e031      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d018      	beq.n	8005fde <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	8a92      	ldrh	r2, [r2, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	8a92      	ldrh	r2, [r2, #20]
 8005fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005fc2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005fc4:	8b7b      	ldrh	r3, [r7, #26]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d90b      	bls.n	8005fe2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005fca:	8b7b      	ldrh	r3, [r7, #26]
 8005fcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	8a92      	ldrh	r2, [r2, #20]
 8005fd4:	fb03 f202 	mul.w	r2, r3, r2
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61da      	str	r2, [r3, #28]
 8005fdc:	e001      	b.n	8005fe2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	78db      	ldrb	r3, [r3, #3]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	8a92      	ldrh	r2, [r2, #20]
 8005ff0:	fb03 f202 	mul.w	r2, r3, r2
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	61da      	str	r2, [r3, #28]
 8005ff8:	e006      	b.n	8006008 <USB_HC_StartXfer+0x1a4>
 8005ffa:	bf00      	nop
 8005ffc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006010:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006012:	04d9      	lsls	r1, r3, #19
 8006014:	4ba3      	ldr	r3, [pc, #652]	@ (80062a4 <USB_HC_StartXfer+0x440>)
 8006016:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006018:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	7d9b      	ldrb	r3, [r3, #22]
 800601e:	075b      	lsls	r3, r3, #29
 8006020:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	0148      	lsls	r0, r1, #5
 8006028:	6a39      	ldr	r1, [r7, #32]
 800602a:	4401      	add	r1, r0
 800602c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006030:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006032:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6999      	ldr	r1, [r3, #24]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604a:	460a      	mov	r2, r1
 800604c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	440a      	add	r2, r1
 800607c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006080:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006084:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	7e7b      	ldrb	r3, [r7, #25]
 8006096:	075b      	lsls	r3, r3, #29
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	0148      	lsls	r0, r1, #5
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	4401      	add	r1, r0
 80060a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	799b      	ldrb	r3, [r3, #6]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 80c3 	bne.w	8006238 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	7c5b      	ldrb	r3, [r3, #17]
 80060b6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80060bc:	4313      	orrs	r3, r2
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	6a3a      	ldr	r2, [r7, #32]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80060ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80060ce:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	79db      	ldrb	r3, [r3, #7]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d123      	bne.n	8006140 <USB_HC_StartXfer+0x2dc>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11f      	bne.n	8006140 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	6a3a      	ldr	r2, [r7, #32]
 8006114:	440a      	add	r2, r1
 8006116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800611a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	440a      	add	r2, r1
 8006136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800613a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800613e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	7c9b      	ldrb	r3, [r3, #18]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d003      	beq.n	8006150 <USB_HC_StartXfer+0x2ec>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	7c9b      	ldrb	r3, [r3, #18]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d117      	bne.n	8006180 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006154:	2b01      	cmp	r3, #1
 8006156:	d113      	bne.n	8006180 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	78db      	ldrb	r3, [r3, #3]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10f      	bne.n	8006180 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	6a3a      	ldr	r2, [r7, #32]
 8006174:	440a      	add	r2, r1
 8006176:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800617a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800617e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	7c9b      	ldrb	r3, [r3, #18]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d162      	bne.n	800624e <USB_HC_StartXfer+0x3ea>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	78db      	ldrb	r3, [r3, #3]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d15e      	bne.n	800624e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	3b01      	subs	r3, #1
 8006196:	2b03      	cmp	r3, #3
 8006198:	d858      	bhi.n	800624c <USB_HC_StartXfer+0x3e8>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <USB_HC_StartXfer+0x33c>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061d3 	.word	0x080061d3
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	08006217 	.word	0x08006217
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ce:	6053      	str	r3, [r2, #4]
          break;
 80061d0:	e03d      	b.n	800624e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	0151      	lsls	r1, r2, #5
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	440a      	add	r2, r1
 80061e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ec:	f043 030e 	orr.w	r3, r3, #14
 80061f0:	6053      	str	r3, [r2, #4]
          break;
 80061f2:	e02c      	b.n	800624e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	440a      	add	r2, r1
 800620a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800620e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006212:	6053      	str	r3, [r2, #4]
          break;
 8006214:	e01b      	b.n	800624e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	440a      	add	r2, r1
 800622c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006234:	6053      	str	r3, [r2, #4]
          break;
 8006236:	e00a      	b.n	800624e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	6053      	str	r3, [r2, #4]
 800624a:	e000      	b.n	800624e <USB_HC_StartXfer+0x3ea>
          break;
 800624c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006264:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	78db      	ldrb	r3, [r3, #3]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e003      	b.n	8006280 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800627e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006286:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e055      	b.n	8006350 <USB_HC_StartXfer+0x4ec>
 80062a4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	78db      	ldrb	r3, [r3, #3]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d14e      	bne.n	800634e <USB_HC_StartXfer+0x4ea>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d04a      	beq.n	800634e <USB_HC_StartXfer+0x4ea>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	79db      	ldrb	r3, [r3, #7]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d146      	bne.n	800634e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	7c9b      	ldrb	r3, [r3, #18]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d831      	bhi.n	800632c <USB_HC_StartXfer+0x4c8>
 80062c8:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <USB_HC_StartXfer+0x46c>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	08006305 	.word	0x08006305
 80062d8:	080062e1 	.word	0x080062e1
 80062dc:	08006305 	.word	0x08006305
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	3303      	adds	r3, #3
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d91c      	bls.n	8006330 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	619a      	str	r2, [r3, #24]
        }
        break;
 8006302:	e015      	b.n	8006330 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	3303      	adds	r3, #3
 800630a:	089b      	lsrs	r3, r3, #2
 800630c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800630e:	8afa      	ldrh	r2, [r7, #22]
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	b29b      	uxth	r3, r3
 800631a:	429a      	cmp	r2, r3
 800631c:	d90a      	bls.n	8006334 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	619a      	str	r2, [r3, #24]
        }
        break;
 800632a:	e003      	b.n	8006334 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800632c:	bf00      	nop
 800632e:	e002      	b.n	8006336 <USB_HC_StartXfer+0x4d2>
        break;
 8006330:	bf00      	nop
 8006332:	e000      	b.n	8006336 <USB_HC_StartXfer+0x4d2>
        break;
 8006334:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6999      	ldr	r1, [r3, #24]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	785a      	ldrb	r2, [r3, #1]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	b29b      	uxth	r3, r3
 8006344:	2000      	movs	r0, #0
 8006346:	9000      	str	r0, [sp, #0]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff f9ec 	bl	8005726 <USB_WritePacket>
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3728      	adds	r7, #40	@ 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	b29b      	uxth	r3, r3
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800637a:	b480      	push	{r7}
 800637c:	b089      	sub	sp, #36	@ 0x24
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	0c9b      	lsrs	r3, r3, #18
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	0fdb      	lsrs	r3, r3, #31
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	0fdb      	lsrs	r3, r3, #31
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d10d      	bne.n	80063fc <USB_HC_Halt+0x82>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <USB_HC_Halt+0x82>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d002      	beq.n	80063f8 <USB_HC_Halt+0x7e>
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d101      	bne.n	80063fc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e0d8      	b.n	80065ae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <USB_HC_Halt+0x8e>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d173      	bne.n	80064f0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006426:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d14a      	bne.n	80064ca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d133      	bne.n	80064a8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800645a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800645e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800647a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800647e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	3301      	adds	r3, #1
 8006484:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800648c:	d82e      	bhi.n	80064ec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a4:	d0ec      	beq.n	8006480 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064a6:	e081      	b.n	80065ac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064c6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064c8:	e070      	b.n	80065ac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ea:	e05f      	b.n	80065ac <USB_HC_Halt+0x232>
            break;
 80064ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ee:	e05d      	b.n	80065ac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800650a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800650e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d133      	bne.n	8006588 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	440a      	add	r2, r1
 8006536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800653a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800653e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	440a      	add	r2, r1
 8006556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800655a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800655e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	3301      	adds	r3, #1
 8006564:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800656c:	d81d      	bhi.n	80065aa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006584:	d0ec      	beq.n	8006560 <USB_HC_Halt+0x1e6>
 8006586:	e011      	b.n	80065ac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e000      	b.n	80065ac <USB_HC_Halt+0x232>
          break;
 80065aa:	bf00      	nop
    }
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3724      	adds	r7, #36	@ 0x24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	04da      	lsls	r2, r3, #19
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <USB_DoPing+0x74>)
 80065da:	4013      	ands	r3, r2
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006604:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800660c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4413      	add	r3, r2
 8006616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800661a:	461a      	mov	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	1ff80000 	.word	0x1ff80000

08006634 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fe ffaf 	bl	80055ac <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800664e:	2110      	movs	r1, #16
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f808 	bl	8005666 <USB_FlushTxFifo>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff f832 	bl	80056ca <USB_FlushRxFifo>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006670:	2300      	movs	r3, #0
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e01f      	b.n	80066b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800668c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006694:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800669c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066aa:	461a      	mov	r2, r3
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	3301      	adds	r3, #1
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b0f      	cmp	r3, #15
 80066ba:	d9dc      	bls.n	8006676 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066bc:	2300      	movs	r3, #0
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e034      	b.n	800672c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f6:	461a      	mov	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006708:	d80c      	bhi.n	8006724 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800671c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006720:	d0ec      	beq.n	80066fc <USB_StopHost+0xc8>
 8006722:	e000      	b.n	8006726 <USB_StopHost+0xf2>
        break;
 8006724:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	3301      	adds	r3, #1
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b0f      	cmp	r3, #15
 8006730:	d9c7      	bls.n	80066c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006738:	461a      	mov	r2, r3
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fe ff1e 	bl	800558a <USB_EnableGlobalInt>

  return ret;
 800674e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3720      	adds	r7, #32
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b089      	sub	sp, #36	@ 0x24
 800675c:	af04      	add	r7, sp, #16
 800675e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006760:	2301      	movs	r3, #1
 8006762:	2202      	movs	r2, #2
 8006764:	2102      	movs	r1, #2
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fc83 	bl	8007072 <USBH_FindInterface>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2bff      	cmp	r3, #255	@ 0xff
 8006774:	d002      	beq.n	800677c <USBH_CDC_InterfaceInit+0x24>
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d901      	bls.n	8006780 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800677c:	2302      	movs	r3, #2
 800677e:	e13d      	b.n	80069fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc58 	bl	800703a <USBH_SelectInterface>
 800678a:	4603      	mov	r3, r0
 800678c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006794:	2302      	movs	r3, #2
 8006796:	e131      	b.n	80069fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800679e:	2050      	movs	r0, #80	@ 0x50
 80067a0:	f001 fafc 	bl	8007d9c <malloc>
 80067a4:	4603      	mov	r3, r0
 80067a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	e11f      	b.n	80069fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067bc:	2250      	movs	r2, #80	@ 0x50
 80067be:	2100      	movs	r1, #0
 80067c0:	68b8      	ldr	r0, [r7, #8]
 80067c2:	f001 fba9 	bl	8007f18 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	211a      	movs	r1, #26
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da15      	bge.n	800680a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	211a      	movs	r1, #26
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	211a      	movs	r1, #26
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ffbe 	bl	8007792 <USBH_AllocPipe>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7819      	ldrb	r1, [r3, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	7858      	ldrb	r0, [r3, #1]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	8952      	ldrh	r2, [r2, #10]
 8006836:	9202      	str	r2, [sp, #8]
 8006838:	2203      	movs	r2, #3
 800683a:	9201      	str	r2, [sp, #4]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4623      	mov	r3, r4
 8006840:	4602      	mov	r2, r0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 ff76 	bl	8007734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2200      	movs	r2, #0
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fa27 	bl	8007ca4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006856:	2300      	movs	r3, #0
 8006858:	2200      	movs	r2, #0
 800685a:	210a      	movs	r1, #10
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fc08 	bl	8007072 <USBH_FindInterface>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	2bff      	cmp	r3, #255	@ 0xff
 800686a:	d002      	beq.n	8006872 <USBH_CDC_InterfaceInit+0x11a>
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d901      	bls.n	8006876 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006872:	2302      	movs	r3, #2
 8006874:	e0c2      	b.n	80069fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	211a      	movs	r1, #26
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	4413      	add	r3, r2
 8006882:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b25b      	sxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	da16      	bge.n	80068bc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	211a      	movs	r1, #26
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	211a      	movs	r1, #26
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	835a      	strh	r2, [r3, #26]
 80068ba:	e015      	b.n	80068e8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	211a      	movs	r1, #26
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	211a      	movs	r1, #26
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	4413      	add	r3, r2
 80068de:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068e2:	881a      	ldrh	r2, [r3, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	211a      	movs	r1, #26
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da16      	bge.n	800692e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	211a      	movs	r1, #26
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	211a      	movs	r1, #26
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006926:	881a      	ldrh	r2, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	835a      	strh	r2, [r3, #26]
 800692c:	e015      	b.n	800695a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	211a      	movs	r1, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	211a      	movs	r1, #26
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	7b9b      	ldrb	r3, [r3, #14]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 ff16 	bl	8007792 <USBH_AllocPipe>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	7bdb      	ldrb	r3, [r3, #15]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 ff0c 	bl	8007792 <USBH_AllocPipe>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	7b59      	ldrb	r1, [r3, #13]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	7b98      	ldrb	r0, [r3, #14]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	8b12      	ldrh	r2, [r2, #24]
 800699a:	9202      	str	r2, [sp, #8]
 800699c:	2202      	movs	r2, #2
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4623      	mov	r3, r4
 80069a4:	4602      	mov	r2, r0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fec4 	bl	8007734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	7b19      	ldrb	r1, [r3, #12]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	7bd8      	ldrb	r0, [r3, #15]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	8b52      	ldrh	r2, [r2, #26]
 80069c4:	9202      	str	r2, [sp, #8]
 80069c6:	2202      	movs	r2, #2
 80069c8:	9201      	str	r2, [sp, #4]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	4623      	mov	r3, r4
 80069ce:	4602      	mov	r2, r0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 feaf 	bl	8007734 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	7b5b      	ldrb	r3, [r3, #13]
 80069e2:	2200      	movs	r2, #0
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f95c 	bl	8007ca4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	7b1b      	ldrb	r3, [r3, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f955 	bl	8007ca4 <USBH_LL_SetToggle>

  return USBH_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fea4 	bl	8007772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fecf 	bl	80077d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	7b1b      	ldrb	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	7b1b      	ldrb	r3, [r3, #12]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fe91 	bl	8007772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	7b1b      	ldrb	r3, [r3, #12]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 febc 	bl	80077d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	7b5b      	ldrb	r3, [r3, #13]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00e      	beq.n	8006a88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7b5b      	ldrb	r3, [r3, #13]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fe7e 	bl	8007772 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	7b5b      	ldrb	r3, [r3, #13]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fea9 	bl	80077d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 f985 	bl	8007dac <free>
    phost->pActiveClass->pData = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3340      	adds	r3, #64	@ 0x40
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8b1 	bl	8006c36 <GetLineCoding>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006aea:	7afb      	ldrb	r3, [r7, #11]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006afc:	2301      	movs	r3, #1
 8006afe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d877      	bhi.n	8006c08 <USBH_CDC_Process+0x114>
 8006b18:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <USBH_CDC_Process+0x2c>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b35 	.word	0x08006b35
 8006b24:	08006b3b 	.word	0x08006b3b
 8006b28:	08006b6b 	.word	0x08006b6b
 8006b2c:	08006bdf 	.word	0x08006bdf
 8006b30:	08006bed 	.word	0x08006bed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	e06d      	b.n	8006c16 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f897 	bl	8006c74 <SetLineCoding>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b58:	e058      	b.n	8006c0c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d055      	beq.n	8006c0c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2204      	movs	r2, #4
 8006b64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006b68:	e050      	b.n	8006c0c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	3340      	adds	r3, #64	@ 0x40
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f860 	bl	8006c36 <GetLineCoding>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d126      	bne.n	8006bce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b92:	791b      	ldrb	r3, [r3, #4]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d13b      	bne.n	8006c10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d133      	bne.n	8006c10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bb2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d12b      	bne.n	8006c10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bc0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d124      	bne.n	8006c10 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f958 	bl	8006e7c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bcc:	e020      	b.n	8006c10 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d01d      	beq.n	8006c10 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006bdc:	e018      	b.n	8006c10 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f867 	bl	8006cb2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8da 	bl	8006d9e <CDC_ProcessReception>
      break;
 8006bea:	e014      	b.n	8006c16 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bec:	2100      	movs	r1, #0
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fb29 	bl	8007246 <USBH_ClrFeature>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006c06:	e005      	b.n	8006c14 <USBH_CDC_Process+0x120>

    default:
      break;
 8006c08:	bf00      	nop
 8006c0a:	e004      	b.n	8006c16 <USBH_CDC_Process+0x122>
      break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <USBH_CDC_Process+0x122>
      break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <USBH_CDC_Process+0x122>
      break;
 8006c14:	bf00      	nop

  }

  return status;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	22a1      	movs	r2, #161	@ 0xa1
 8006c44:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2221      	movs	r2, #33	@ 0x21
 8006c4a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2207      	movs	r2, #7
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fb12 	bl	800728e <USBH_CtlReq>
 8006c6a:	4603      	mov	r3, r0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2221      	movs	r2, #33	@ 0x21
 8006c82:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2207      	movs	r2, #7
 8006c9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2207      	movs	r2, #7
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 faf3 	bl	800728e <USBH_CtlReq>
 8006ca8:	4603      	mov	r3, r0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af02      	add	r7, sp, #8
 8006cb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d002      	beq.n	8006cd8 <CDC_ProcessTransmission+0x26>
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d023      	beq.n	8006d1e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cd6:	e05e      	b.n	8006d96 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	8b12      	ldrh	r2, [r2, #24]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d90b      	bls.n	8006cfc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8b1a      	ldrh	r2, [r3, #24]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	7b5b      	ldrb	r3, [r3, #13]
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	9000      	str	r0, [sp, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fcda 	bl	80076ae <USBH_BulkSendData>
 8006cfa:	e00b      	b.n	8006d14 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	7b5b      	ldrb	r3, [r3, #13]
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	9000      	str	r0, [sp, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fccd 	bl	80076ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006d1c:	e03b      	b.n	8006d96 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	7b5b      	ldrb	r3, [r3, #13]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 ff93 	bl	8007c50 <USBH_LL_GetURBState>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d2e:	7afb      	ldrb	r3, [r7, #11]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d128      	bne.n	8006d86 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	8b12      	ldrh	r2, [r2, #24]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d90e      	bls.n	8006d5e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	8b12      	ldrh	r2, [r2, #24]
 8006d48:	1a9a      	subs	r2, r3, r2
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	8b12      	ldrh	r2, [r2, #24]
 8006d56:	441a      	add	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	61da      	str	r2, [r3, #28]
 8006d5c:	e002      	b.n	8006d64 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006d74:	e00e      	b.n	8006d94 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f868 	bl	8006e54 <USBH_CDC_TransmitCallback>
      break;
 8006d84:	e006      	b.n	8006d94 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d103      	bne.n	8006d94 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006d94:	bf00      	nop
  }
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d002      	beq.n	8006dc4 <CDC_ProcessReception+0x26>
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d00e      	beq.n	8006de0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8006dc2:	e043      	b.n	8006e4c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	6a19      	ldr	r1, [r3, #32]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	8b5a      	ldrh	r2, [r3, #26]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	7b1b      	ldrb	r3, [r3, #12]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fc91 	bl	80076f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2204      	movs	r2, #4
 8006dda:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006dde:	e035      	b.n	8006e4c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	7b1b      	ldrb	r3, [r3, #12]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ff32 	bl	8007c50 <USBH_LL_GetURBState>
 8006dec:	4603      	mov	r3, r0
 8006dee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d129      	bne.n	8006e4a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	7b1b      	ldrb	r3, [r3, #12]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fea7 	bl	8007b50 <USBH_LL_GetLastXferSize>
 8006e02:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d016      	beq.n	8006e3c <CDC_ProcessReception+0x9e>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	8b5b      	ldrh	r3, [r3, #26]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d110      	bne.n	8006e3c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2203      	movs	r2, #3
 8006e36:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006e3a:	e006      	b.n	8006e4a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f80f 	bl	8006e68 <USBH_CDC_ReceiveCallback>
      break;
 8006e4a:	bf00      	nop
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e029      	b.n	8006efc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	79fa      	ldrb	r2, [r7, #7]
 8006eac:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f81f 	bl	8006f04 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fdb9 	bl	8007a6c <USBH_LL_Init>

  return USBH_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e009      	b.n	8006f26 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	33e0      	adds	r3, #224	@ 0xe0
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b0f      	cmp	r3, #15
 8006f2a:	d9f2      	bls.n	8006f12 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e009      	b.n	8006f46 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4c:	d3f1      	bcc.n	8006f32 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2240      	movs	r2, #64	@ 0x40
 8006f72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	331c      	adds	r3, #28
 8006f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 ffb7 	bl	8007f18 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 ffae 	bl	8007f18 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006fc2:	2212      	movs	r2, #18
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 ffa6 	bl	8007f18 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006fd2:	223e      	movs	r2, #62	@ 0x3e
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 ff9e 	bl	8007f18 <memset>

  return USBH_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d016      	beq.n	8007028 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10e      	bne.n	8007022 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	33de      	adds	r3, #222	@ 0xde
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
 8007020:	e004      	b.n	800702c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007022:	2302      	movs	r3, #2
 8007024:	73fb      	strb	r3, [r7, #15]
 8007026:	e001      	b.n	800702c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007028:	2302      	movs	r3, #2
 800702a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	429a      	cmp	r2, r3
 8007054:	d204      	bcs.n	8007060 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800705e:	e001      	b.n	8007064 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007060:	2302      	movs	r3, #2
 8007062:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007072:	b480      	push	{r7}
 8007074:	b087      	sub	sp, #28
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	4608      	mov	r0, r1
 800707c:	4611      	mov	r1, r2
 800707e:	461a      	mov	r2, r3
 8007080:	4603      	mov	r3, r0
 8007082:	70fb      	strb	r3, [r7, #3]
 8007084:	460b      	mov	r3, r1
 8007086:	70bb      	strb	r3, [r7, #2]
 8007088:	4613      	mov	r3, r2
 800708a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007090:	2300      	movs	r3, #0
 8007092:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800709a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800709c:	e025      	b.n	80070ea <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	221a      	movs	r2, #26
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	3308      	adds	r3, #8
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	3302      	adds	r3, #2
 80070ae:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	795b      	ldrb	r3, [r3, #5]
 80070b4:	78fa      	ldrb	r2, [r7, #3]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d002      	beq.n	80070c0 <USBH_FindInterface+0x4e>
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	2bff      	cmp	r3, #255	@ 0xff
 80070be:	d111      	bne.n	80070e4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070c4:	78ba      	ldrb	r2, [r7, #2]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d002      	beq.n	80070d0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070ca:	78bb      	ldrb	r3, [r7, #2]
 80070cc:	2bff      	cmp	r3, #255	@ 0xff
 80070ce:	d109      	bne.n	80070e4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070d4:	787a      	ldrb	r2, [r7, #1]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d002      	beq.n	80070e0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070da:	787b      	ldrb	r3, [r7, #1]
 80070dc:	2bff      	cmp	r3, #255	@ 0xff
 80070de:	d101      	bne.n	80070e4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	e006      	b.n	80070f2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	3301      	adds	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d9d6      	bls.n	800709e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070f0:	23ff      	movs	r3, #255	@ 0xff
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fcec 	bl	8007ae4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800710c:	2101      	movs	r1, #1
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fdb1 	bl	8007c76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f804 	bl	8007160 <USBH_HandleSof>
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b0b      	cmp	r3, #11
 8007170:	d10a      	bne.n	8007188 <USBH_HandleSof+0x28>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
  }
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80071a0:	bf00      	nop
}
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80071c4:	bf00      	nop
}
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fc7b 	bl	8007b1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	791b      	ldrb	r3, [r3, #4]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fad2 	bl	80077d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	795b      	ldrb	r3, [r3, #5]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 facc 	bl	80077d4 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	789b      	ldrb	r3, [r3, #2]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d10f      	bne.n	800727a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	b29a      	uxth	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800727a:	2200      	movs	r2, #0
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f805 	bl	800728e <USBH_CtlReq>
 8007284:	4603      	mov	r3, r0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	4613      	mov	r3, r2
 800729a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	789b      	ldrb	r3, [r3, #2]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d002      	beq.n	80072ae <USBH_CtlReq+0x20>
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d00f      	beq.n	80072cc <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80072ac:	e027      	b.n	80072fe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2202      	movs	r2, #2
 80072c4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80072c6:	2301      	movs	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ca:	e018      	b.n	80072fe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f81b 	bl	8007308 <USBH_HandleControl>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <USBH_CtlReq+0x54>
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d106      	bne.n	80072f0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	761a      	strb	r2, [r3, #24]
      break;
 80072ee:	e005      	b.n	80072fc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d102      	bne.n	80072fc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	709a      	strb	r2, [r3, #2]
      break;
 80072fc:	bf00      	nop
  }
  return status;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af02      	add	r7, sp, #8
 800730e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7e1b      	ldrb	r3, [r3, #24]
 800731c:	3b01      	subs	r3, #1
 800731e:	2b0a      	cmp	r3, #10
 8007320:	f200 8157 	bhi.w	80075d2 <USBH_HandleControl+0x2ca>
 8007324:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <USBH_HandleControl+0x24>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007359 	.word	0x08007359
 8007330:	08007373 	.word	0x08007373
 8007334:	080073dd 	.word	0x080073dd
 8007338:	08007403 	.word	0x08007403
 800733c:	0800743d 	.word	0x0800743d
 8007340:	08007467 	.word	0x08007467
 8007344:	080074b9 	.word	0x080074b9
 8007348:	080074db 	.word	0x080074db
 800734c:	08007517 	.word	0x08007517
 8007350:	0800753d 	.word	0x0800753d
 8007354:	0800757b 	.word	0x0800757b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f103 0110 	add.w	r1, r3, #16
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	795b      	ldrb	r3, [r3, #5]
 8007362:	461a      	mov	r2, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f945 	bl	80075f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	761a      	strb	r2, [r3, #24]
      break;
 8007370:	e13a      	b.n	80075e8 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc69 	bl	8007c50 <USBH_LL_GetURBState>
 800737e:	4603      	mov	r3, r0
 8007380:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d11e      	bne.n	80073c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	7c1b      	ldrb	r3, [r3, #16]
 800738c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007390:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8adb      	ldrh	r3, [r3, #22]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800739a:	7b7b      	ldrb	r3, [r7, #13]
 800739c:	2b80      	cmp	r3, #128	@ 0x80
 800739e:	d103      	bne.n	80073a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2203      	movs	r2, #3
 80073a4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80073a6:	e116      	b.n	80075d6 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2205      	movs	r2, #5
 80073ac:	761a      	strb	r2, [r3, #24]
      break;
 80073ae:	e112      	b.n	80075d6 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 80073b0:	7b7b      	ldrb	r3, [r7, #13]
 80073b2:	2b80      	cmp	r3, #128	@ 0x80
 80073b4:	d103      	bne.n	80073be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2209      	movs	r2, #9
 80073ba:	761a      	strb	r2, [r3, #24]
      break;
 80073bc:	e10b      	b.n	80075d6 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2207      	movs	r2, #7
 80073c2:	761a      	strb	r2, [r3, #24]
      break;
 80073c4:	e107      	b.n	80075d6 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d003      	beq.n	80073d4 <USBH_HandleControl+0xcc>
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	f040 8101 	bne.w	80075d6 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	220b      	movs	r2, #11
 80073d8:	761a      	strb	r2, [r3, #24]
      break;
 80073da:	e0fc      	b.n	80075d6 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6899      	ldr	r1, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	899a      	ldrh	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f93c 	bl	8007672 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2204      	movs	r2, #4
 80073fe:	761a      	strb	r2, [r3, #24]
      break;
 8007400:	e0f2      	b.n	80075e8 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	791b      	ldrb	r3, [r3, #4]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc21 	bl	8007c50 <USBH_LL_GetURBState>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d103      	bne.n	8007420 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2209      	movs	r2, #9
 800741c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800741e:	e0dc      	b.n	80075da <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b05      	cmp	r3, #5
 8007424:	d102      	bne.n	800742c <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8007426:	2303      	movs	r3, #3
 8007428:	73fb      	strb	r3, [r7, #15]
      break;
 800742a:	e0d6      	b.n	80075da <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b04      	cmp	r3, #4
 8007430:	f040 80d3 	bne.w	80075da <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	220b      	movs	r2, #11
 8007438:	761a      	strb	r2, [r3, #24]
      break;
 800743a:	e0ce      	b.n	80075da <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	899a      	ldrh	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	795b      	ldrb	r3, [r3, #5]
 8007448:	2001      	movs	r0, #1
 800744a:	9000      	str	r0, [sp, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8eb 	bl	8007628 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2206      	movs	r2, #6
 8007462:	761a      	strb	r2, [r3, #24]
      break;
 8007464:	e0c0      	b.n	80075e8 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	795b      	ldrb	r3, [r3, #5]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fbef 	bl	8007c50 <USBH_LL_GetURBState>
 8007472:	4603      	mov	r3, r0
 8007474:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d103      	bne.n	8007484 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2207      	movs	r2, #7
 8007480:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007482:	e0ac      	b.n	80075de <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	2b05      	cmp	r3, #5
 8007488:	d105      	bne.n	8007496 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	220c      	movs	r2, #12
 800748e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007490:	2303      	movs	r3, #3
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	e0a3      	b.n	80075de <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d103      	bne.n	80074a4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2205      	movs	r2, #5
 80074a0:	761a      	strb	r2, [r3, #24]
      break;
 80074a2:	e09c      	b.n	80075de <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	f040 8099 	bne.w	80075de <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	220b      	movs	r2, #11
 80074b0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	73fb      	strb	r3, [r7, #15]
      break;
 80074b6:	e092      	b.n	80075de <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	791b      	ldrb	r3, [r3, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8d6 	bl	8007672 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2208      	movs	r2, #8
 80074d6:	761a      	strb	r2, [r3, #24]

      break;
 80074d8:	e086      	b.n	80075e8 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	791b      	ldrb	r3, [r3, #4]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fbb5 	bl	8007c50 <USBH_LL_GetURBState>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d105      	bne.n	80074fc <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	220d      	movs	r2, #13
 80074f4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80074fa:	e072      	b.n	80075e2 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d103      	bne.n	800750a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	220b      	movs	r2, #11
 8007506:	761a      	strb	r2, [r3, #24]
      break;
 8007508:	e06b      	b.n	80075e2 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b05      	cmp	r3, #5
 800750e:	d168      	bne.n	80075e2 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8007510:	2303      	movs	r3, #3
 8007512:	73fb      	strb	r3, [r7, #15]
      break;
 8007514:	e065      	b.n	80075e2 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	795b      	ldrb	r3, [r3, #5]
 800751a:	2201      	movs	r2, #1
 800751c:	9200      	str	r2, [sp, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	2100      	movs	r1, #0
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f880 	bl	8007628 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	220a      	movs	r2, #10
 8007538:	761a      	strb	r2, [r3, #24]
      break;
 800753a:	e055      	b.n	80075e8 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	795b      	ldrb	r3, [r3, #5]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fb84 	bl	8007c50 <USBH_LL_GetURBState>
 8007548:	4603      	mov	r3, r0
 800754a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d105      	bne.n	800755e <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	220d      	movs	r2, #13
 800755a:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800755c:	e043      	b.n	80075e6 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d103      	bne.n	800756c <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2209      	movs	r2, #9
 8007568:	761a      	strb	r2, [r3, #24]
      break;
 800756a:	e03c      	b.n	80075e6 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d139      	bne.n	80075e6 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	220b      	movs	r2, #11
 8007576:	761a      	strb	r2, [r3, #24]
      break;
 8007578:	e035      	b.n	80075e6 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7e5b      	ldrb	r3, [r3, #25]
 800757e:	3301      	adds	r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	765a      	strb	r2, [r3, #25]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	7e5b      	ldrb	r3, [r3, #25]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d806      	bhi.n	800759c <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800759a:	e025      	b.n	80075e8 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075a2:	2106      	movs	r1, #6
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	795b      	ldrb	r3, [r3, #5]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f90d 	bl	80077d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f907 	bl	80077d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80075cc:	2302      	movs	r3, #2
 80075ce:	73fb      	strb	r3, [r7, #15]
      break;
 80075d0:	e00a      	b.n	80075e8 <USBH_HandleControl+0x2e0>

    default:
      break;
 80075d2:	bf00      	nop
 80075d4:	e008      	b.n	80075e8 <USBH_HandleControl+0x2e0>
      break;
 80075d6:	bf00      	nop
 80075d8:	e006      	b.n	80075e8 <USBH_HandleControl+0x2e0>
      break;
 80075da:	bf00      	nop
 80075dc:	e004      	b.n	80075e8 <USBH_HandleControl+0x2e0>
      break;
 80075de:	bf00      	nop
 80075e0:	e002      	b.n	80075e8 <USBH_HandleControl+0x2e0>
      break;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <USBH_HandleControl+0x2e0>
      break;
 80075e6:	bf00      	nop
  }

  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af04      	add	r7, sp, #16
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007602:	79f9      	ldrb	r1, [r7, #7]
 8007604:	2300      	movs	r3, #0
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	2308      	movs	r3, #8
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	2300      	movs	r3, #0
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	2200      	movs	r2, #0
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fae8 	bl	8007bee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af04      	add	r7, sp, #16
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4611      	mov	r1, r2
 8007634:	461a      	mov	r2, r3
 8007636:	460b      	mov	r3, r1
 8007638:	80fb      	strh	r3, [r7, #6]
 800763a:	4613      	mov	r3, r2
 800763c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800764c:	7979      	ldrb	r1, [r7, #5]
 800764e:	7e3b      	ldrb	r3, [r7, #24]
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	2301      	movs	r3, #1
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2300      	movs	r3, #0
 8007660:	2200      	movs	r2, #0
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fac3 	bl	8007bee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b088      	sub	sp, #32
 8007676:	af04      	add	r7, sp, #16
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	4611      	mov	r1, r2
 800767e:	461a      	mov	r2, r3
 8007680:	460b      	mov	r3, r1
 8007682:	80fb      	strh	r3, [r7, #6]
 8007684:	4613      	mov	r3, r2
 8007686:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007688:	7979      	ldrb	r1, [r7, #5]
 800768a:	2300      	movs	r3, #0
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	9302      	str	r3, [sp, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	2301      	movs	r3, #1
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	2300      	movs	r3, #0
 800769c:	2201      	movs	r2, #1
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 faa5 	bl	8007bee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076a4:	2300      	movs	r3, #0

}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b088      	sub	sp, #32
 80076b2:	af04      	add	r7, sp, #16
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	4611      	mov	r1, r2
 80076ba:	461a      	mov	r2, r3
 80076bc:	460b      	mov	r3, r1
 80076be:	80fb      	strh	r3, [r7, #6]
 80076c0:	4613      	mov	r3, r2
 80076c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076d2:	7979      	ldrb	r1, [r7, #5]
 80076d4:	7e3b      	ldrb	r3, [r7, #24]
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	88fb      	ldrh	r3, [r7, #6]
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	2301      	movs	r3, #1
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2302      	movs	r3, #2
 80076e6:	2200      	movs	r2, #0
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fa80 	bl	8007bee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4611      	mov	r1, r2
 8007704:	461a      	mov	r2, r3
 8007706:	460b      	mov	r3, r1
 8007708:	80fb      	strh	r3, [r7, #6]
 800770a:	4613      	mov	r3, r2
 800770c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800770e:	7979      	ldrb	r1, [r7, #5]
 8007710:	2300      	movs	r3, #0
 8007712:	9303      	str	r3, [sp, #12]
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	9302      	str	r3, [sp, #8]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	2301      	movs	r3, #1
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2302      	movs	r3, #2
 8007722:	2201      	movs	r2, #1
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 fa62 	bl	8007bee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af04      	add	r7, sp, #16
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	70fb      	strb	r3, [r7, #3]
 8007746:	460b      	mov	r3, r1
 8007748:	70bb      	strb	r3, [r7, #2]
 800774a:	4613      	mov	r3, r2
 800774c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800774e:	7878      	ldrb	r0, [r7, #1]
 8007750:	78ba      	ldrb	r2, [r7, #2]
 8007752:	78f9      	ldrb	r1, [r7, #3]
 8007754:	8b3b      	ldrh	r3, [r7, #24]
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	7d3b      	ldrb	r3, [r7, #20]
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	7c3b      	ldrb	r3, [r7, #16]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4603      	mov	r3, r0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa07 	bl	8007b76 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa26 	bl	8007bd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f836 	bl	8007810 <USBH_GetFreePipe>
 80077a4:	4603      	mov	r3, r0
 80077a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00a      	beq.n	80077c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	89fb      	ldrh	r3, [r7, #14]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	33e0      	adds	r3, #224	@ 0xe0
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80077c8:	89fb      	ldrh	r3, [r7, #14]
 80077ca:	b2db      	uxtb	r3, r3
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	d80d      	bhi.n	8007802 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	33e0      	adds	r3, #224	@ 0xe0
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	33e0      	adds	r3, #224	@ 0xe0
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800781c:	2300      	movs	r3, #0
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e00f      	b.n	8007842 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	33e0      	adds	r3, #224	@ 0xe0
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d102      	bne.n	800783c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	b29b      	uxth	r3, r3
 800783a:	e007      	b.n	800784c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	3301      	adds	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b0f      	cmp	r3, #15
 8007846:	d9ec      	bls.n	8007822 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800785c:	2201      	movs	r2, #1
 800785e:	490e      	ldr	r1, [pc, #56]	@ (8007898 <MX_USB_HOST_Init+0x40>)
 8007860:	480e      	ldr	r0, [pc, #56]	@ (800789c <MX_USB_HOST_Init+0x44>)
 8007862:	f7ff fb15 	bl	8006e90 <USBH_Init>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800786c:	f7f9 fbba 	bl	8000fe4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007870:	490b      	ldr	r1, [pc, #44]	@ (80078a0 <MX_USB_HOST_Init+0x48>)
 8007872:	480a      	ldr	r0, [pc, #40]	@ (800789c <MX_USB_HOST_Init+0x44>)
 8007874:	f7ff fbb7 	bl	8006fe6 <USBH_RegisterClass>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800787e:	f7f9 fbb1 	bl	8000fe4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007882:	4806      	ldr	r0, [pc, #24]	@ (800789c <MX_USB_HOST_Init+0x44>)
 8007884:	f7ff fc3b 	bl	80070fe <USBH_Start>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800788e:	f7f9 fba9 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	080078a5 	.word	0x080078a5
 800789c:	200001e4 	.word	0x200001e4
 80078a0:	2000000c 	.word	0x2000000c

080078a4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	d819      	bhi.n	80078ec <USBH_UserProcess+0x48>
 80078b8:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <USBH_UserProcess+0x1c>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	080078dd 	.word	0x080078dd
 80078c8:	080078ed 	.word	0x080078ed
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078d5 	.word	0x080078d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80078d4:	4b09      	ldr	r3, [pc, #36]	@ (80078fc <USBH_UserProcess+0x58>)
 80078d6:	2203      	movs	r2, #3
 80078d8:	701a      	strb	r2, [r3, #0]
  break;
 80078da:	e008      	b.n	80078ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80078dc:	4b07      	ldr	r3, [pc, #28]	@ (80078fc <USBH_UserProcess+0x58>)
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
  break;
 80078e2:	e004      	b.n	80078ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <USBH_UserProcess+0x58>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
  break;
 80078ea:	e000      	b.n	80078ee <USBH_UserProcess+0x4a>

  default:
  break;
 80078ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	200005bc 	.word	0x200005bc

08007900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	@ 0x28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007920:	d147      	bne.n	80079b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	4b25      	ldr	r3, [pc, #148]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792a:	4a24      	ldr	r2, [pc, #144]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6313      	str	r3, [r2, #48]	@ 0x30
 8007932:	4b22      	ldr	r3, [pc, #136]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800793e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007944:	2300      	movs	r3, #0
 8007946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	4619      	mov	r1, r3
 8007952:	481b      	ldr	r0, [pc, #108]	@ (80079c0 <HAL_HCD_MspInit+0xc0>)
 8007954:	f7f9 fed8 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007958:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800795c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795e:	2302      	movs	r3, #2
 8007960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007966:	2300      	movs	r3, #0
 8007968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800796a:	230a      	movs	r3, #10
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800796e:	f107 0314 	add.w	r3, r7, #20
 8007972:	4619      	mov	r1, r3
 8007974:	4812      	ldr	r0, [pc, #72]	@ (80079c0 <HAL_HCD_MspInit+0xc0>)
 8007976:	f7f9 fec7 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800797a:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 800797c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797e:	4a0f      	ldr	r2, [pc, #60]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 8007980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007984:	6353      	str	r3, [r2, #52]	@ 0x34
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	4b0c      	ldr	r3, [pc, #48]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 800798c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798e:	4a0b      	ldr	r2, [pc, #44]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 8007990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007994:	6453      	str	r3, [r2, #68]	@ 0x44
 8007996:	4b09      	ldr	r3, [pc, #36]	@ (80079bc <HAL_HCD_MspInit+0xbc>)
 8007998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079a2:	2200      	movs	r2, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	2043      	movs	r0, #67	@ 0x43
 80079a8:	f7f9 fe77 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079ac:	2043      	movs	r0, #67	@ 0x43
 80079ae:	f7f9 fe90 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079b2:	bf00      	nop
 80079b4:	3728      	adds	r7, #40	@ 0x28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40023800 	.word	0x40023800
 80079c0:	40020000 	.word	0x40020000

080079c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fbb2 	bl	800713c <USBH_LL_IncTimer>
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fbee 	bl	80071d0 <USBH_LL_Connect>
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fbf7 	bl	80071fe <USBH_LL_Disconnect>
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
 8007a24:	4613      	mov	r3, r2
 8007a26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fba4 	bl	8007190 <USBH_LL_PortEnabled>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fba4 	bl	80071ac <USBH_LL_PortDisabled>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d12a      	bne.n	8007ad4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007a7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007a8a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a8e:	4b14      	ldr	r3, [pc, #80]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007a90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007a96:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007a98:	2208      	movs	r2, #8
 8007a9a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007a9c:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007aaa:	2202      	movs	r2, #2
 8007aac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ab4:	480a      	ldr	r0, [pc, #40]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007ab6:	f7f9 ffdc 	bl	8001a72 <HAL_HCD_Init>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ac0:	f7f9 fa90 	bl	8000fe4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007ac4:	4806      	ldr	r0, [pc, #24]	@ (8007ae0 <USBH_LL_Init+0x74>)
 8007ac6:	f7fa fc0b 	bl	80022e0 <HAL_HCD_GetCurrentFrame>
 8007aca:	4603      	mov	r3, r0
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fb25 	bl	800711e <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200005c0 	.word	0x200005c0

08007ae4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fa fb86 	bl	800220c <HAL_HCD_Start>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f900 	bl	8007d0c <USBH_Get_USB_Status>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fa fb8e 	bl	8002252 <HAL_HCD_Stop>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 f8e5 	bl	8007d0c <USBH_Get_USB_Status>
 8007b42:	4603      	mov	r3, r0
 8007b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fa fba5 	bl	80022b6 <HAL_HCD_HC_GetXferCount>
 8007b6c:	4603      	mov	r3, r0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8007b76:	b590      	push	{r4, r7, lr}
 8007b78:	b089      	sub	sp, #36	@ 0x24
 8007b7a:	af04      	add	r7, sp, #16
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	461a      	mov	r2, r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70bb      	strb	r3, [r7, #2]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007b9e:	787c      	ldrb	r4, [r7, #1]
 8007ba0:	78ba      	ldrb	r2, [r7, #2]
 8007ba2:	78f9      	ldrb	r1, [r7, #3]
 8007ba4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	f7f9 ffc3 	bl	8001b40 <HAL_HCD_HC_Init>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f8a3 	bl	8007d0c <USBH_Get_USB_Status>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd90      	pop	{r4, r7, pc}

08007bd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007bee:	b590      	push	{r4, r7, lr}
 8007bf0:	b089      	sub	sp, #36	@ 0x24
 8007bf2:	af04      	add	r7, sp, #16
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	70fb      	strb	r3, [r7, #3]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70bb      	strb	r3, [r7, #2]
 8007c04:	4613      	mov	r3, r2
 8007c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007c16:	787c      	ldrb	r4, [r7, #1]
 8007c18:	78ba      	ldrb	r2, [r7, #2]
 8007c1a:	78f9      	ldrb	r1, [r7, #3]
 8007c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	4623      	mov	r3, r4
 8007c32:	f7fa f83d 	bl	8001cb0 <HAL_HCD_HC_SubmitRequest>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f865 	bl	8007d0c <USBH_Get_USB_Status>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd90      	pop	{r4, r7, pc}

08007c50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa fb10 	bl	800228c <HAL_HCD_HC_GetURBState>
 8007c6c:	4603      	mov	r3, r0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d103      	bne.n	8007c94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f868 	bl	8007d64 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c94:	20c8      	movs	r0, #200	@ 0xc8
 8007c96:	f7f9 fc01 	bl	800149c <HAL_Delay>
  return USBH_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007cba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	3317      	adds	r3, #23
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	68f9      	ldr	r1, [r7, #12]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	333c      	adds	r3, #60	@ 0x3c
 8007ce2:	78ba      	ldrb	r2, [r7, #2]
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e009      	b.n	8007cfc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	68f9      	ldr	r1, [r7, #12]
 8007cec:	4613      	mov	r3, r2
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	333d      	adds	r3, #61	@ 0x3d
 8007cf8:	78ba      	ldrb	r2, [r7, #2]
 8007cfa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
	...

08007d0c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d817      	bhi.n	8007d50 <USBH_Get_USB_Status+0x44>
 8007d20:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <USBH_Get_USB_Status+0x1c>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d3f 	.word	0x08007d3f
 8007d30:	08007d45 	.word	0x08007d45
 8007d34:	08007d4b 	.word	0x08007d4b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3c:	e00b      	b.n	8007d56 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	73fb      	strb	r3, [r7, #15]
    break;
 8007d42:	e008      	b.n	8007d56 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d44:	2301      	movs	r3, #1
 8007d46:	73fb      	strb	r3, [r7, #15]
    break;
 8007d48:	e005      	b.n	8007d56 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4e:	e002      	b.n	8007d56 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007d50:	2302      	movs	r3, #2
 8007d52:	73fb      	strb	r3, [r7, #15]
    break;
 8007d54:	bf00      	nop
  }
  return usb_status;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e001      	b.n	8007d82 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	461a      	mov	r2, r3
 8007d86:	2101      	movs	r1, #1
 8007d88:	4803      	ldr	r0, [pc, #12]	@ (8007d98 <MX_DriverVbusFS+0x34>)
 8007d8a:	f7f9 fe59 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	40020800 	.word	0x40020800

08007d9c <malloc>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	@ (8007da8 <malloc+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f000 b82d 	b.w	8007e00 <_malloc_r>
 8007da6:	bf00      	nop
 8007da8:	2000002c 	.word	0x2000002c

08007dac <free>:
 8007dac:	4b02      	ldr	r3, [pc, #8]	@ (8007db8 <free+0xc>)
 8007dae:	4601      	mov	r1, r0
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	f000 b8f5 	b.w	8007fa0 <_free_r>
 8007db6:	bf00      	nop
 8007db8:	2000002c 	.word	0x2000002c

08007dbc <sbrk_aligned>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8007dfc <sbrk_aligned+0x40>)
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	6831      	ldr	r1, [r6, #0]
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	b911      	cbnz	r1, 8007dce <sbrk_aligned+0x12>
 8007dc8:	f000 f8ae 	bl	8007f28 <_sbrk_r>
 8007dcc:	6030      	str	r0, [r6, #0]
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f000 f8a9 	bl	8007f28 <_sbrk_r>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	d103      	bne.n	8007de2 <sbrk_aligned+0x26>
 8007dda:	f04f 34ff 	mov.w	r4, #4294967295
 8007dde:	4620      	mov	r0, r4
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	1cc4      	adds	r4, r0, #3
 8007de4:	f024 0403 	bic.w	r4, r4, #3
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d0f8      	beq.n	8007dde <sbrk_aligned+0x22>
 8007dec:	1a21      	subs	r1, r4, r0
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 f89a 	bl	8007f28 <_sbrk_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d1f2      	bne.n	8007dde <sbrk_aligned+0x22>
 8007df8:	e7ef      	b.n	8007dda <sbrk_aligned+0x1e>
 8007dfa:	bf00      	nop
 8007dfc:	200009a0 	.word	0x200009a0

08007e00 <_malloc_r>:
 8007e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	1ccd      	adds	r5, r1, #3
 8007e06:	f025 0503 	bic.w	r5, r5, #3
 8007e0a:	3508      	adds	r5, #8
 8007e0c:	2d0c      	cmp	r5, #12
 8007e0e:	bf38      	it	cc
 8007e10:	250c      	movcc	r5, #12
 8007e12:	2d00      	cmp	r5, #0
 8007e14:	4606      	mov	r6, r0
 8007e16:	db01      	blt.n	8007e1c <_malloc_r+0x1c>
 8007e18:	42a9      	cmp	r1, r5
 8007e1a:	d904      	bls.n	8007e26 <_malloc_r+0x26>
 8007e1c:	230c      	movs	r3, #12
 8007e1e:	6033      	str	r3, [r6, #0]
 8007e20:	2000      	movs	r0, #0
 8007e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007efc <_malloc_r+0xfc>
 8007e2a:	f000 f869 	bl	8007f00 <__malloc_lock>
 8007e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e32:	461c      	mov	r4, r3
 8007e34:	bb44      	cbnz	r4, 8007e88 <_malloc_r+0x88>
 8007e36:	4629      	mov	r1, r5
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f7ff ffbf 	bl	8007dbc <sbrk_aligned>
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	4604      	mov	r4, r0
 8007e42:	d158      	bne.n	8007ef6 <_malloc_r+0xf6>
 8007e44:	f8d8 4000 	ldr.w	r4, [r8]
 8007e48:	4627      	mov	r7, r4
 8007e4a:	2f00      	cmp	r7, #0
 8007e4c:	d143      	bne.n	8007ed6 <_malloc_r+0xd6>
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	d04b      	beq.n	8007eea <_malloc_r+0xea>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	4639      	mov	r1, r7
 8007e56:	4630      	mov	r0, r6
 8007e58:	eb04 0903 	add.w	r9, r4, r3
 8007e5c:	f000 f864 	bl	8007f28 <_sbrk_r>
 8007e60:	4581      	cmp	r9, r0
 8007e62:	d142      	bne.n	8007eea <_malloc_r+0xea>
 8007e64:	6821      	ldr	r1, [r4, #0]
 8007e66:	1a6d      	subs	r5, r5, r1
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ffa6 	bl	8007dbc <sbrk_aligned>
 8007e70:	3001      	adds	r0, #1
 8007e72:	d03a      	beq.n	8007eea <_malloc_r+0xea>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	442b      	add	r3, r5
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	bb62      	cbnz	r2, 8007edc <_malloc_r+0xdc>
 8007e82:	f8c8 7000 	str.w	r7, [r8]
 8007e86:	e00f      	b.n	8007ea8 <_malloc_r+0xa8>
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	1b52      	subs	r2, r2, r5
 8007e8c:	d420      	bmi.n	8007ed0 <_malloc_r+0xd0>
 8007e8e:	2a0b      	cmp	r2, #11
 8007e90:	d917      	bls.n	8007ec2 <_malloc_r+0xc2>
 8007e92:	1961      	adds	r1, r4, r5
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	6025      	str	r5, [r4, #0]
 8007e98:	bf18      	it	ne
 8007e9a:	6059      	strne	r1, [r3, #4]
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	bf08      	it	eq
 8007ea0:	f8c8 1000 	streq.w	r1, [r8]
 8007ea4:	5162      	str	r2, [r4, r5]
 8007ea6:	604b      	str	r3, [r1, #4]
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f000 f82f 	bl	8007f0c <__malloc_unlock>
 8007eae:	f104 000b 	add.w	r0, r4, #11
 8007eb2:	1d23      	adds	r3, r4, #4
 8007eb4:	f020 0007 	bic.w	r0, r0, #7
 8007eb8:	1ac2      	subs	r2, r0, r3
 8007eba:	bf1c      	itt	ne
 8007ebc:	1a1b      	subne	r3, r3, r0
 8007ebe:	50a3      	strne	r3, [r4, r2]
 8007ec0:	e7af      	b.n	8007e22 <_malloc_r+0x22>
 8007ec2:	6862      	ldr	r2, [r4, #4]
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	bf0c      	ite	eq
 8007ec8:	f8c8 2000 	streq.w	r2, [r8]
 8007ecc:	605a      	strne	r2, [r3, #4]
 8007ece:	e7eb      	b.n	8007ea8 <_malloc_r+0xa8>
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	6864      	ldr	r4, [r4, #4]
 8007ed4:	e7ae      	b.n	8007e34 <_malloc_r+0x34>
 8007ed6:	463c      	mov	r4, r7
 8007ed8:	687f      	ldr	r7, [r7, #4]
 8007eda:	e7b6      	b.n	8007e4a <_malloc_r+0x4a>
 8007edc:	461a      	mov	r2, r3
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d1fb      	bne.n	8007edc <_malloc_r+0xdc>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	6053      	str	r3, [r2, #4]
 8007ee8:	e7de      	b.n	8007ea8 <_malloc_r+0xa8>
 8007eea:	230c      	movs	r3, #12
 8007eec:	6033      	str	r3, [r6, #0]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 f80c 	bl	8007f0c <__malloc_unlock>
 8007ef4:	e794      	b.n	8007e20 <_malloc_r+0x20>
 8007ef6:	6005      	str	r5, [r0, #0]
 8007ef8:	e7d6      	b.n	8007ea8 <_malloc_r+0xa8>
 8007efa:	bf00      	nop
 8007efc:	200009a4 	.word	0x200009a4

08007f00 <__malloc_lock>:
 8007f00:	4801      	ldr	r0, [pc, #4]	@ (8007f08 <__malloc_lock+0x8>)
 8007f02:	f000 b84b 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 8007f06:	bf00      	nop
 8007f08:	20000ae4 	.word	0x20000ae4

08007f0c <__malloc_unlock>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	@ (8007f14 <__malloc_unlock+0x8>)
 8007f0e:	f000 b846 	b.w	8007f9e <__retarget_lock_release_recursive>
 8007f12:	bf00      	nop
 8007f14:	20000ae4 	.word	0x20000ae4

08007f18 <memset>:
 8007f18:	4402      	add	r2, r0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d100      	bne.n	8007f22 <memset+0xa>
 8007f20:	4770      	bx	lr
 8007f22:	f803 1b01 	strb.w	r1, [r3], #1
 8007f26:	e7f9      	b.n	8007f1c <memset+0x4>

08007f28 <_sbrk_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d06      	ldr	r5, [pc, #24]	@ (8007f44 <_sbrk_r+0x1c>)
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4604      	mov	r4, r0
 8007f30:	4608      	mov	r0, r1
 8007f32:	602b      	str	r3, [r5, #0]
 8007f34:	f7f9 f9ce 	bl	80012d4 <_sbrk>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_sbrk_r+0x1a>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_sbrk_r+0x1a>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	20000ae0 	.word	0x20000ae0

08007f48 <__errno>:
 8007f48:	4b01      	ldr	r3, [pc, #4]	@ (8007f50 <__errno+0x8>)
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	2000002c 	.word	0x2000002c

08007f54 <__libc_init_array>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4d0d      	ldr	r5, [pc, #52]	@ (8007f8c <__libc_init_array+0x38>)
 8007f58:	4c0d      	ldr	r4, [pc, #52]	@ (8007f90 <__libc_init_array+0x3c>)
 8007f5a:	1b64      	subs	r4, r4, r5
 8007f5c:	10a4      	asrs	r4, r4, #2
 8007f5e:	2600      	movs	r6, #0
 8007f60:	42a6      	cmp	r6, r4
 8007f62:	d109      	bne.n	8007f78 <__libc_init_array+0x24>
 8007f64:	4d0b      	ldr	r5, [pc, #44]	@ (8007f94 <__libc_init_array+0x40>)
 8007f66:	4c0c      	ldr	r4, [pc, #48]	@ (8007f98 <__libc_init_array+0x44>)
 8007f68:	f000 f864 	bl	8008034 <_init>
 8007f6c:	1b64      	subs	r4, r4, r5
 8007f6e:	10a4      	asrs	r4, r4, #2
 8007f70:	2600      	movs	r6, #0
 8007f72:	42a6      	cmp	r6, r4
 8007f74:	d105      	bne.n	8007f82 <__libc_init_array+0x2e>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7c:	4798      	blx	r3
 8007f7e:	3601      	adds	r6, #1
 8007f80:	e7ee      	b.n	8007f60 <__libc_init_array+0xc>
 8007f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f86:	4798      	blx	r3
 8007f88:	3601      	adds	r6, #1
 8007f8a:	e7f2      	b.n	8007f72 <__libc_init_array+0x1e>
 8007f8c:	08008070 	.word	0x08008070
 8007f90:	08008070 	.word	0x08008070
 8007f94:	08008070 	.word	0x08008070
 8007f98:	08008074 	.word	0x08008074

08007f9c <__retarget_lock_acquire_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_release_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <_free_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d041      	beq.n	800802c <_free_r+0x8c>
 8007fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fac:	1f0c      	subs	r4, r1, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb8      	it	lt
 8007fb2:	18e4      	addlt	r4, r4, r3
 8007fb4:	f7ff ffa4 	bl	8007f00 <__malloc_lock>
 8007fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008030 <_free_r+0x90>)
 8007fba:	6813      	ldr	r3, [r2, #0]
 8007fbc:	b933      	cbnz	r3, 8007fcc <_free_r+0x2c>
 8007fbe:	6063      	str	r3, [r4, #4]
 8007fc0:	6014      	str	r4, [r2, #0]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc8:	f7ff bfa0 	b.w	8007f0c <__malloc_unlock>
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d908      	bls.n	8007fe2 <_free_r+0x42>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	1821      	adds	r1, r4, r0
 8007fd4:	428b      	cmp	r3, r1
 8007fd6:	bf01      	itttt	eq
 8007fd8:	6819      	ldreq	r1, [r3, #0]
 8007fda:	685b      	ldreq	r3, [r3, #4]
 8007fdc:	1809      	addeq	r1, r1, r0
 8007fde:	6021      	streq	r1, [r4, #0]
 8007fe0:	e7ed      	b.n	8007fbe <_free_r+0x1e>
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	b10b      	cbz	r3, 8007fec <_free_r+0x4c>
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d9fa      	bls.n	8007fe2 <_free_r+0x42>
 8007fec:	6811      	ldr	r1, [r2, #0]
 8007fee:	1850      	adds	r0, r2, r1
 8007ff0:	42a0      	cmp	r0, r4
 8007ff2:	d10b      	bne.n	800800c <_free_r+0x6c>
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	4401      	add	r1, r0
 8007ff8:	1850      	adds	r0, r2, r1
 8007ffa:	4283      	cmp	r3, r0
 8007ffc:	6011      	str	r1, [r2, #0]
 8007ffe:	d1e0      	bne.n	8007fc2 <_free_r+0x22>
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	6053      	str	r3, [r2, #4]
 8008006:	4408      	add	r0, r1
 8008008:	6010      	str	r0, [r2, #0]
 800800a:	e7da      	b.n	8007fc2 <_free_r+0x22>
 800800c:	d902      	bls.n	8008014 <_free_r+0x74>
 800800e:	230c      	movs	r3, #12
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	e7d6      	b.n	8007fc2 <_free_r+0x22>
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	1821      	adds	r1, r4, r0
 8008018:	428b      	cmp	r3, r1
 800801a:	bf04      	itt	eq
 800801c:	6819      	ldreq	r1, [r3, #0]
 800801e:	685b      	ldreq	r3, [r3, #4]
 8008020:	6063      	str	r3, [r4, #4]
 8008022:	bf04      	itt	eq
 8008024:	1809      	addeq	r1, r1, r0
 8008026:	6021      	streq	r1, [r4, #0]
 8008028:	6054      	str	r4, [r2, #4]
 800802a:	e7ca      	b.n	8007fc2 <_free_r+0x22>
 800802c:	bd38      	pop	{r3, r4, r5, pc}
 800802e:	bf00      	nop
 8008030:	200009a4 	.word	0x200009a4

08008034 <_init>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr

08008040 <_fini>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr
