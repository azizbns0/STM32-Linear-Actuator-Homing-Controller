/*
 * homing.h
 *
 * Created on: Sep 25, 2025
 * Author: azizb
 */

#ifndef INC_HOMING_H_
#define INC_HOMING_H_

#include <stdint.h>
#include <stdbool.h>

// --- FSM States ---
typedef enum {
    HOMING_STATE_IDLE = 0,
    HOMING_STATE_MOVE_TO_LEFT,
    HOMING_STATE_MOVE_TO_RIGHT_MEASURE,
    HOMING_STATE_MOVE_TO_LEFT_MEASURE,
    HOMING_STATE_MOVE_TO_MIDDLE,
    HOMING_STATE_DONE,
    HOMING_STATE_ERROR
} HomingState_t;

// --- Context Structure for Robustness and Asymmetric Speeds ---
typedef struct {
    HomingState_t state;
    uint32_t start_tick;          // Timestamp for start of the current state/movement
    uint32_t measurement_start;   // Timestamp for start of a travel time measurement
    uint32_t t_lr_ms;             // Time from Left Limit to Right Limit
    uint32_t t_rl_ms;             // Time from Right Limit to Left Limit
    uint32_t middle_time_ms;      // Calculated time to middle from the left limit
    uint32_t timeout_ms;          // Configurable overall timeout
    uint32_t debounce_ms;         // Configurable debounce time
    int error_code;
    bool middle_movement_started; // Flag to handle delayed start in final move
    bool enable_asymmetric_calc;  // Flag for asymmetric calculation (set to true by default)
} HomingCtx_t;

// --- Public Interface ---
void Homing_Init(HomingCtx_t *ctx);
void Homing_Start(HomingCtx_t *ctx);
void Homing_Run(HomingCtx_t *ctx);
bool Homing_IsDone(const HomingCtx_t *ctx);
bool Homing_IsError(const HomingCtx_t *ctx);
HomingState_t Homing_GetState(const HomingCtx_t *ctx);
int Homing_GetError(const HomingCtx_t *ctx);

#endif /* INC_HOMING_H_ */
