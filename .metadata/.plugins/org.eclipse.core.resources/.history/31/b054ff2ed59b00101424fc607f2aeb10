/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_host.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "main.h"
#include "homing.h"
#include "homing_hal.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

I2S_HandleTypeDef hi2s3;

SPI_HandleTypeDef hspi1;


/* USER CODE BEGIN PV */
typedef enum {
    APP_STATE_IDLE = 0,
    APP_STATE_HOMING_ACTIVE,
    APP_STATE_HOMING_COMPLETE,
    APP_STATE_HOMING_ERROR,
    APP_STATE_COOLDOWN
} app_state_t;

static struct {
    homing_context_t homing_ctx;
    app_state_t app_state;
    uint32_t state_start_time;
    uint32_t last_led_update;
    bool auto_restart_enabled;
} app;
#define SIMULATION_SPEED    0.2f    // Very slow movement
#define LEFT_SWITCH_POS     100.0f
#define RIGHT_SWITCH_POS    900.0f
#define TIMEOUT_MS          30000

#define COMPLETE_DISPLAY_MS 3000    // Show complete for 3 seconds
#define ERROR_DISPLAY_MS    5000    // Show error for 5 seconds
#define RESTART_DELAY_MS    2000    // Wait 2 seconds before restart
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
static void app_init(void);
static void app_update(void);
static void app_update_leds(void);
static void app_handle_homing_states(void);
static void set_all_leds(bool state);
static void app_start_homing(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */
  app_init();


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN WHILE */
  /* Replace your while(1) loop with this corrected version */

  while (1) {
       app_update();
       HAL_Delay(100); // 50ms cycle time
   }

  /* USER CODE END WHILE */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{

  /* USER CODE BEGIN I2S3_Init 0 */

  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE10 PE11 PE14
                           PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */

  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;  // ‚Üê THIS IS WRONG!
  GPIO_InitStruct.Pull = GPIO_NOPULL;           // ‚Üê THIS IS ALSO WRONG!
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : limit_switche_2_Pin limit_switche_1_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = limit_switche_2_Pin|limit_switche_1_Pin|OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
static void init_app(void) {
    app.state = STATE_IDLE;
    app.state_start = HAL_GetTick();
    app.measure_start = 0;
    app.time_lr = 0;
    app.time_rl = 0;
    app.center_time = 0;
    app.auto_restart = true;

    // Initialize simulation in middle
    app.sim.position = 500.0f;
    app.sim.moving_direction = 0;
    app.sim.last_update = HAL_GetTick();

    clear_all_leds();
}

static void update_simulation(void) {
    uint32_t now = HAL_GetTick();
    uint32_t elapsed = now - app.sim.last_update;

    if (elapsed > 0 && app.sim.moving_direction != 0) {
        float movement = SIMULATION_SPEED * elapsed * app.sim.moving_direction;
        app.sim.position += movement;

        // Clamp to bounds
        if (app.sim.position < 0) app.sim.position = 0;
        if (app.sim.position > 1000) app.sim.position = 1000;
    }

    app.sim.last_update = now;
}

static bool get_left_switch(void) {
    return (app.sim.position <= LEFT_SWITCH_POS);
}

static bool get_right_switch(void) {
    return (app.sim.position >= RIGHT_SWITCH_POS);
}

static void update_homing(void) {
    uint32_t now = HAL_GetTick();
    bool left_sw = get_left_switch();
    bool right_sw = get_right_switch();

    switch (app.state) {
        case STATE_IDLE:
            // Auto start after 3 seconds
            if ((now - app.state_start) > 3000) {
                app.state = STATE_MOVE_LEFT;
                app.state_start = now;
                app.sim.moving_direction = -1; // Move left
            }
            break;

        case STATE_MOVE_LEFT:
            if (left_sw) {
                // Hit left switch
                app.sim.moving_direction = 0; // Stop
                app.state = STATE_MEASURE_LR;
                app.state_start = now;
                app.measure_start = 0; // Will start when we leave the switch
            } else if ((now - app.state_start) > TIMEOUT_MS) {
                app.state = STATE_ERROR;
                app.state_start = now;
                app.sim.moving_direction = 0;
            }
            break;

        case STATE_MEASURE_LR:
            if (left_sw && app.measure_start == 0) {
                // Still on switch, start moving right
                app.sim.moving_direction = 1;
            } else if (!left_sw && app.measure_start == 0) {
                // Just left the switch, start measuring
                app.measure_start = now;
                app.sim.moving_direction = 1;
            } else if (app.measure_start > 0 && right_sw) {
                // Hit right switch, measurement done
                app.time_lr = now - app.measure_start;
                app.sim.moving_direction = 0;
                app.state = STATE_MEASURE_RL;
                app.state_start = now;
                app.measure_start = 0;
            } else if ((now - app.state_start) > TIMEOUT_MS) {
                app.state = STATE_ERROR;
                app.state_start = now;
                app.sim.moving_direction = 0;
            }
            break;

        case STATE_MEASURE_RL:
            if (right_sw && app.measure_start == 0) {
                // Still on switch, start moving left
                app.sim.moving_direction = -1;
            } else if (!right_sw && app.measure_start == 0) {
                // Just left the switch, start measuring
                app.measure_start = now;
                app.sim.moving_direction = -1;
            } else if (app.measure_start > 0 && left_sw) {
                // Hit left switch, measurement done
                app.time_rl = now - app.measure_start;
                app.sim.moving_direction = 0;

                // Calculate center time (simple symmetric)
                app.center_time = app.time_lr / 2;

                if (app.center_time > 0) {
                    app.state = STATE_MOVE_CENTER;
                    app.state_start = now;
                } else {
                    app.state = STATE_ERROR;
                    app.state_start = now;
                }
            } else if ((now - app.state_start) > TIMEOUT_MS) {
                app.state = STATE_ERROR;
                app.state_start = now;
                app.sim.moving_direction = 0;
            }
            break;

        case STATE_MOVE_CENTER:
            // Wait 500ms then start moving to center
            if ((now - app.state_start) > 500 && app.sim.moving_direction == 0) {
                app.sim.moving_direction = 1; // Move right from left switch
                app.state_start = now; // Reset timer for center movement
            } else if (app.sim.moving_direction == 1 && (now - app.state_start) >= app.center_time) {
                // Reached center
                app.sim.moving_direction = 0;
                app.state = STATE_COMPLETE;
                app.state_start = now;
            }

            // Safety: if we hit a switch during center move, it's an error
            if (app.sim.moving_direction != 0 && (left_sw || right_sw)) {
                app.state = STATE_ERROR;
                app.state_start = now;
                app.sim.moving_direction = 0;
            }
            break;

        case STATE_COMPLETE:
            // Stay in complete state for a while
            if ((now - app.state_start) > COMPLETE_DISPLAY_MS) {
                if (app.auto_restart) {
                    // Restart the whole process
                    init_app();
                }
            }
            break;

        case STATE_ERROR:
            // Stay in error state for a while
            if ((now - app.state_start) > ERROR_DISPLAY_MS) {
                if (app.auto_restart) {
                    // Restart the whole process
                    init_app();
                }
            }
            break;
    }
}

static void update_leds(void) {
    clear_all_leds();

    switch (app.state) {
        case STATE_IDLE:
            // All LEDs off
            break;

        case STATE_MOVE_LEFT:
            set_led(LD3_Pin, true); // Orange
            break;

        case STATE_MEASURE_LR:
            set_led(LD5_Pin, true); // Red
            break;

        case STATE_MEASURE_RL:
            set_led(LD6_Pin, true); // Blue
            break;

        case STATE_MOVE_CENTER:
            set_led(LD5_Pin, true); // Red
            set_led(LD6_Pin, true); // Blue (Red + Blue)
            break;

        case STATE_COMPLETE:
            set_led(LD4_Pin, true); // Green
            break;

        case STATE_ERROR:
            // Flash all LEDs
            {
                static uint32_t flash_time = 0;
                static bool flash_state = false;
                uint32_t now = HAL_GetTick();

                if ((now - flash_time) > 500) {
                    flash_state = !flash_state;
                    if (flash_state) {
                        set_led(LD3_Pin, true);
                        set_led(LD4_Pin, true);
                        set_led(LD5_Pin, true);
                        set_led(LD6_Pin, true);
                    }
                    flash_time = now;
                }
            }
            break;
    }
}

static void clear_all_leds(void) {
    HAL_GPIO_WritePin(GPIOD, LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin, GPIO_PIN_RESET);
}

static void set_led(uint16_t led, bool state) {
    HAL_GPIO_WritePin(GPIOD, led, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
      // Error state - flash all LEDs rapidly
      set_all_leds(true);
      HAL_Delay(100);
      set_all_leds(false);
      HAL_Delay(100);
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
