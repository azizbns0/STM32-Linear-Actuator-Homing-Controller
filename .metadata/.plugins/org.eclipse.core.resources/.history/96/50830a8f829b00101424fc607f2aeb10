/*
 * homing.c
 *
 *  Created on: Sep 25, 2025
 *      Author: azizb
 */


#include "homing.h"
#include "homing_porting.h"
#include <stdlib.h>

#ifndef HOMING_DEFAULT_TIMEOUT_MS
#define HOMING_DEFAULT_TIMEOUT_MS 30000U
#endif

#ifndef HOMING_DEFAULT_DEBOUNCE_MS
#define HOMING_DEFAULT_DEBOUNCE_MS 20U
#endif

typedef struct {
    bool stable;
    bool last_raw;
    uint32_t last_change;
} Debounce_t;

static Debounce_t left_db;
static Debounce_t right_db;

static bool DebounceUpdate(Debounce_t *db, bool raw, uint32_t now, uint32_t debounce_ms) {
    if (raw != db->last_raw) {
        db->last_raw = raw;
        db->last_change = now;
    } else {
        if ((now - db->last_change) >= debounce_ms) {
            db->stable = raw;
        }
    }
    return db->stable;
}

void Homing_Init(HomingCtx_t *ctx) {
    ctx->state = HOMING_STATE_IDLE;
    ctx->start_tick = 0;
    ctx->t_lr_ms = 0;
    ctx->t_rl_ms = 0;
    ctx->middle_time_ms = 0;
    ctx->timeout_ms = HOMING_DEFAULT_TIMEOUT_MS;
    ctx->debounce_ms = HOMING_DEFAULT_DEBOUNCE_MS;
    ctx->error_code = 0;
    left_db.stable = left_db.last_raw = false; left_db.last_change = 0;
    right_db.stable = right_db.last_raw = false; right_db.last_change = 0;
}

void Homing_Start(HomingCtx_t *ctx) {
    ctx->t_lr_ms = ctx->t_rl_ms = ctx->middle_time_ms = 0;
    ctx->error_code = 0;
    ctx->state = HOMING_STATE_MOVE_TO_LEFT;
    ctx->start_tick = HW_GetTickMs();
    HW_ActuatorMoveLeft();
}

static bool LeftPressed(HomingCtx_t *ctx, uint32_t now) {
    bool raw = HW_LeftSwitchRaw();
    return DebounceUpdate(&left_db, raw, now, ctx->debounce_ms);
}
static bool RightPressed(HomingCtx_t *ctx, uint32_t now) {
    bool raw = HW_RightSwitchRaw();
    return DebounceUpdate(&right_db, raw, now, ctx->debounce_ms);
}

void Homing_Step(HomingCtx_t *ctx) {
    uint32_t now = HW_GetTickMs();
    HW_SimulationUpdate(now);
    (void)LeftPressed(ctx, now);
    (void)RightPressed(ctx, now);

    switch (ctx->state) {
        case HOMING_STATE_IDLE:
            break;

        case HOMING_STATE_MOVE_TO_LEFT:
            if (LeftPressed(ctx, now)) {
                HW_ActuatorStop();
                ctx->start_tick = now;
                ctx->state = HOMING_STATE_MOVE_TO_RIGHT_MEASURE;
            }
            if ((now - ctx->start_tick) > ctx->timeout_ms && ctx->state == HOMING_STATE_MOVE_TO_LEFT) {
                ctx->state = HOMING_STATE_ERROR;
                ctx->error_code = 1;
                HW_ActuatorStop();
            }
            if (ctx->state == HOMING_STATE_MOVE_TO_RIGHT_MEASURE && (now - ctx->start_tick) >= 30) {
                ctx->start_tick = now;
                HW_ActuatorMoveRight();
            }
            break;

        case HOMING_STATE_MOVE_TO_RIGHT_MEASURE:
            if (RightPressed(ctx, now)) {
                HW_ActuatorStop();
                ctx->t_lr_ms = now - ctx->start_tick;
                ctx->start_tick = now;
                ctx->state = HOMING_STATE_MOVE_TO_LEFT_MEASURE;
            }
            if ((now - ctx->start_tick) > ctx->timeout_ms && ctx->state == HOMING_STATE_MOVE_TO_RIGHT_MEASURE) {
                ctx->state = HOMING_STATE_ERROR;
                ctx->error_code = 2;
                HW_ActuatorStop();
            }
            if (ctx->state == HOMING_STATE_MOVE_TO_LEFT_MEASURE && (now - ctx->start_tick) >= 30 && ctx->t_lr_ms != 0) {
                ctx->start_tick = now;
                HW_ActuatorMoveLeft();
            }
            break;

        case HOMING_STATE_MOVE_TO_LEFT_MEASURE:
            if (LeftPressed(ctx, now)) {
                HW_ActuatorStop();
                ctx->t_rl_ms = now - ctx->start_tick;
                if (ctx->t_lr_ms == 0) {
                    ctx->state = HOMING_STATE_ERROR;
                    ctx->error_code = 3;
                    break;
                }
                ctx->middle_time_ms = ctx->t_lr_ms / 2; // simple method
                ctx->start_tick = now;
                ctx->state = HOMING_STATE_MOVE_TO_MIDDLE;
            }
            if ((now - ctx->start_tick) > ctx->timeout_ms && ctx->state == HOMING_STATE_MOVE_TO_LEFT_MEASURE) {
                ctx->state = HOMING_STATE_ERROR;
                ctx->error_code = 4;
                HW_ActuatorStop();
            }
            if (ctx->state == HOMING_STATE_MOVE_TO_MIDDLE && (now - ctx->start_tick) >= 30) {
                ctx->start_tick = now;
                HW_ActuatorMoveRight();
            }
            break;

        case HOMING_STATE_MOVE_TO_MIDDLE:
            if (LeftPressed(ctx, now) || RightPressed(ctx, now)) {
                HW_ActuatorStop();
                ctx->state = HOMING_STATE_ERROR;
                ctx->error_code = 5;
                break;
            }
            if ((now - ctx->start_tick) >= ctx->middle_time_ms) {
                HW_ActuatorStop();
                ctx->state = HOMING_STATE_DONE;
            }
            if ((now - ctx->start_tick) > (ctx->timeout_ms * 2)) {
                ctx->state = HOMING_STATE_ERROR;
                ctx->error_code = 6;
                HW_ActuatorStop();
            }
            break;

        case HOMING_STATE_DONE:
            break;

        case HOMING_STATE_ERROR:
            break;

        default:
            break;
    }
}

HomingState_t Homing_GetState(HomingCtx_t *ctx) {
    return ctx->state;
}
